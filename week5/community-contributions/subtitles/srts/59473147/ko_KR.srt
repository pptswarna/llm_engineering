WEBVTT

00:00.770 --> 00:01.910
정말 안심이에요

00:01.910 --> 00:03.050
그건 다 지난 일이에요

00:03.080 --> 00:05.120
인체 실험은 이제 안 해요

00:05.150 --> 00:09.500
최악의 결과를 마지막으로 보고 다음으로 넘어가죠

00:09.530 --> 00:13.760
우리가 개척지와 함께 일할 때가 왔어요

00:13.910 --> 00:18.560
GPT 4 미니부터 시작할 거예요 미니 버전이죠

00:18.650 --> 00:20.810
그렇게 많지는 않아요

00:20.840 --> 00:22.400
여전히 거대한 개척지죠

00:22.430 --> 00:23.210
`LM'요

00:23.420 --> 00:28.310
우리가 함께 작업한 다른 모델과 비교해서 얼마나 잘 팔릴지 궁금해요

00:28.490 --> 00:33.380
먼저 GPT 4 프롬프트를 작업해야 하는데요

00:33.680 --> 00:39.950
이건 여러분이 배우는 데 있어 아주 중요한 부분이에요 개척자 모델을

00:39.950 --> 00:46.070
통해 이런 상업적 문제를 어떻게 해결할지 볼 수 있으니까요

00:46.100 --> 00:51.500
하지만 많은 부분이 여러분에게 제2의 본성이 되어야 합니다 왜냐하면 이전에 했던 많은 작업들과

00:51.500 --> 00:53.210
비슷하기 때문이죠

00:53.240 --> 00:57.590
가장 먼저 항목에 대한 함수 메시지를 작성할게요

00:57.590 --> 01:03.680
데이터 포인트에 따라 GPT 4를 위한 프롬프트로 바꾸겠습니다 이

01:03.680 --> 01:10.490
메시지 목록 중 하나의 형태로 온 거죠 여러분이 기억하시는 사전 목록이요

01:10.670 --> 01:13.880
이렇게 사전 목록을 만드는 거예요

01:13.880 --> 01:21.170
시스템 메시지로 시작합니다 이 경우엔 물품의 가격을 추정하고 가격으로만

01:21.200 --> 01:24.350
답장합니다 설명 없이요

01:24.500 --> 01:31.760
사용자 프롬프트는 이 아이템에서 테스트 프롬프트를 가져옵니다 많이 보셨던

01:31.760 --> 01:32.900
거죠

01:33.140 --> 01:36.500
데이터 비트를 좀 뒤져볼게요

01:36.500 --> 01:41.090
먼저 이 텍스트를 $로 줄여볼게요

01:41.120 --> 01:46.250
제가 그렇게 하는 이유는 아니, 그렇게 말해야 하는 이유는 이걸

01:46.250 --> 01:52.430
처음에 넣은 이유는 나중에 오픈 소스 모델로 작업할 때 오픈 소스 모델을 제공해

01:52.430 --> 01:57.860
최대한 쉽게 문제를 해결하게 될 테니까요 배울 게 많은데 그걸 할

01:57.860 --> 02:01.890
80억 매개 변수밖에 없으니까요

02:01.920 --> 02:07.170
개척 시대의 모델은 훨씬 더 강력하고 능력이 뛰어나며 똑같은

02:07.170 --> 02:09.750
가드레일도 필요 없죠

02:09.840 --> 02:15.870
GPT4나 미니가 아주 좋아할 거예요 센트를 포함해서 가격을 예측할 수 있으니까요 어떤 게 효과가 있는지

02:15.870 --> 02:17.280
정확히 알고 있죠

02:17.280 --> 02:20.790
이 경우에는 불필요한 가드레일이었어요

02:20.790 --> 02:21.990
그래서 뺐어요

02:22.440 --> 02:27.540
프롬프트 맨 끝도 제거했어요 가격은 달러라는 곳이죠

02:27.570 --> 02:34.350
이걸 제거한 이유는 메시지 목록을 만들 때 시스템 역할에

02:34.350 --> 02:38.100
먼저 입력하기 때문이에요.

02:38.130 --> 02:45.840
사용자를 추가하고 사용자 프롬프트를 입력합니다 그리고 보조에서 오는 메시지를 하나 더 입력해요

02:45.840 --> 02:50.070
GPT4 미니의 회신 같은 거죠

02:50.310 --> 02:50.610
네

02:50.610 --> 02:56.700
가격은 달러라는 대답만 남죠

02:57.300 --> 03:04.530
그래서 참을 수 없을 정도로 다음 토큰에 가격을 적고 싶어지죠 이게

03:04.530 --> 03:08.550
조수로부터 돌아오는 응답이니까요

03:08.610 --> 03:15.630
그래서 저희는 그 부분을 가장 그럴듯한 다음 토큰으로 채워야

03:15.630 --> 03:23.010
한다고 생각했어요 이 제품을 살 때 가장 그럴듯한 가격으로요

03:23.010 --> 03:28.590
그래서 조수처럼 반응하게 해서 그렇게 채우는 게 실험해보기에

03:28.590 --> 03:31.890
좋은 방법이죠

03:32.280 --> 03:35.430
그게 우리 일이에요

03:35.460 --> 03:38.850
빨리 이걸 시험해 보고 살펴보죠

03:38.880 --> 03:47.430
메시지 for get을 입력하고 첫 번째 테스트 데이터 포인트를 입력하면

03:47.430 --> 03:52.890
롤 시스템과 시스템 프롬프트가 뜨죠

03:52.980 --> 03:55.320
이해가 되면 좋겠네요

03:55.380 --> 04:00.120
롤 유저를 선택하고 콘텐츠는 비용이죠

04:00.120 --> 04:08.310
그리고 제 생각에 이 물건들은 끔찍한 메모리일 것 같아요 이 물건들의 가격을

04:08.310 --> 04:11.310
전부 다 맞춰야 했으니까요

04:11.310 --> 04:13.740
보기만 해도 겁이 나요

04:13.800 --> 04:15.780
이번엔 제 문제가 아니에요

04:15.780 --> 04:17.760
GPT 4와 미니 중 선택해야 해요

04:17.760 --> 04:23.910
사용자 프롬프트의 일부로 그걸 받게 되죠 그런 다음 지원 응답을 받게 돼요

04:23.910 --> 04:26.850
그 자체로 보상가는 달러예요

04:27.390 --> 04:31.620
그럼 이 대화를 계속하려고 할 거예요

04:31.890 --> 04:36.810
GPT 4를 보내기에 좋은 타이밍인 셈이죠

04:36.840 --> 04:43.410
다음, 짧은 함수가 하나 더 있어요 여기 쓴 Get Price라는

04:43.410 --> 04:51.840
유틸리티로 문자열 s를 이용해 그 문자열에서 부동점 수를 추출해요

04:51.930 --> 05:04.840
예를 들어 GPT 4에서 문자열을 받으면 가격이 대략 1달러 99센트예요

05:04.840 --> 05:04.840
99살요

05:05.290 --> 05:08.110
왜냐하면 어쩌고저쩌고해서요

05:09.610 --> 05:16.120
제 지시를 따르지 않고 계속 떠들면 그래도 옷을 벗을 거예요

05:16.150 --> 05:16.420
이런, 미안해요

05:16.420 --> 05:17.680
밝히지 마세요

05:17.740 --> 05:23.260
99는 여전히 제거할 거예요 99달러 나왔어요

05:23.560 --> 05:24.250
그럴 거예요

05:24.280 --> 05:25.390
잘될 거예요

05:26.290 --> 05:27.280
네

05:27.280 --> 05:30.520
이제 조심스럽게 스크롤을 내릴게요

05:30.550 --> 05:33.880
이제 큰 함수로 넘어가죠

05:33.910 --> 05:34.930
맞아요

05:34.930 --> 05:36.280
이건 진짜예요

05:36.310 --> 05:42.970
GPT 4 미니를 항목과 함께 호출할 겁니다 이렇게 하는 거죠

05:43.000 --> 05:47.830
OpenAI 챗GPT완료 .Create라고 하죠

05:48.190 --> 05:51.940
GPT 4 미니 모델을 통과했어요

05:52.150 --> 05:59.290
그 아이템에 대한 메시지를 전달합니다 방금 말씀드린 함수를 사용해서요

05:59.480 --> 06:07.580
이 시드는 GPT 4에 이걸 재생하고 싶다고 말하는 방법입니다 같은 입력으로

06:07.580 --> 06:11.060
같은 답을 주도록요

06:11.420 --> 06:16.250
오픈아이는 기존 GPT 모델을 변경하기 때문에 늘 이 방식을 고수할 순 없죠

06:16.250 --> 06:19.310
그래서 모델이 바뀌기도 해요

06:19.310 --> 06:21.710
이 숫자는 바뀔 거예요

06:21.830 --> 06:24.200
하지만 모든 게 평등하니 최선을 다하죠

06:24.200 --> 06:27.860
그럼 같은 씨앗으로 두 번 부르면 같은 답이 나오겠네요? Get it

06:28.220 --> 06:29.630
좋은 정보네요

06:30.110 --> 06:36.890
최대 토큰은 작게 두겠습니다 티업이 훌륭하기 때문이죠 가격이

06:36.890 --> 06:40.400
채워질 거라고 기대할 수 있어요

06:40.550 --> 06:44.690
그러니 더 많은 토큰을 가져오느라 돈을 낭비할 필요가 없죠

06:44.690 --> 06:51.350
이런 작업을 하기 때문에 250개의 데이터 포인트에 걸쳐 이 전체 작업은 아주

06:51.380 --> 06:52.520
저렴해요

06:52.610 --> 06:55.760
미국에 있는 제 자리예요

06:55.790 --> 06:58.870
가격은 그보다도 훨씬 less예요

06:58.870 --> 07:03.470
음, less 아, 그러니까 등급이 너무 적어서 사용자 인터페이스에서 안 보이는 거죠

07:03.470 --> 07:05.300
1센트도 안 되는 less요

07:05.480 --> 07:14.120
아주 저렴합니다 짧은 입력 토큰과 5개의 출력 토큰을 사용하니까요

07:14.690 --> 07:18.140
그리고 조심하기 전에 무슨 일이 일어나는지 말해야죠

07:18.260 --> 07:22.280
그 전에 이걸 빨리 해 보죠

07:22.280 --> 07:24.470
GPT 4를 돌려 보죠

07:24.470 --> 07:32.510
테스트 오브 제로로 성능을 확인해 보죠

07:32.570 --> 07:38.210
그걸 실행하면 답이 260으로 나와요 0살요

07:38.360 --> 07:42.140
GPT 4 미니라는 걸 거쳤네요

07:42.170 --> 07:44.480
그리고 뭔가 보내왔죠

07:44.510 --> 07:49.880
이것과 똑같은 것을 보냈고 받은 정보를 바탕으로 이 함수를 적용해서 260개를

07:49.880 --> 07:53.870
제거해 첫 번째 물건의 가격을 맞췄어요.

07:54.140 --> 07:59.060
일단 첫 번째 물건의 가격부터 알아보죠

07:59.060 --> 07:59.810
조금요

08:02.000 --> 08:05.360
60까지 가면 숫자는 3, 7, 4가 되죠

08:05.360 --> 08:07.220
그래서 좀 멀리 갔죠

08:07.580 --> 08:08.030
네

08:08.060 --> 08:14.690
이제 테스터와 GPT 테스트를 통과할 시간입니다 미니 테스트죠

08:14.690 --> 08:20.720
제가 이미 실행해본 걸 몇 번 보셨을 겁니다 꽤 빠르거든요 하지만 전체를 다 하려면

08:20.720 --> 08:22.910
2, 3분 정도 걸려요

08:22.940 --> 08:27.620
여러분이 거기 앉아 계시는 동안 결과를 스크롤할 수 있게 하고 싶진 않았어요

08:27.620 --> 08:33.410
하지만 그 전에 GPT 4 미니가 어떻게 달릴지 한번 맞혀 보세요

08:33.410 --> 08:36.380
오리지널과 비교하면 어떨까요?

08:36.410 --> 08:37.730
평균 수보다요?

08:37.730 --> 08:42.440
제가 대표하는 인류에 대한 반발은 어떨까요?

08:42.440 --> 08:49.190
또한 훈련용 400,000대의 모델이 있는 최첨단 전통 모델과는 어떻게

08:49.220 --> 08:50.990
경쟁할까요?

08:50.990 --> 08:51.860
어디 보죠

08:51.860 --> 08:55.580
그래서 이걸 실행했더니 이렇게 됐어요

08:55.580 --> 09:02.690
노란색과 빨간색은 재생률이 아주 높아요 아까와

09:02.690 --> 09:07.640
같은 260개를 예상했죠

09:08.210 --> 09:12.680
녹색과 붉은색이 보이죠

09:12.710 --> 09:17.480
녹색은 많지만 노란색과 빨간색도 있어요

09:18.710 --> 09:20.240
속도를 높일게요

09:20.270 --> 09:22.400
채소가 정말 많네요

09:23.360 --> 09:24.710
붉은색과 녹색도 더 넣고요

09:24.710 --> 09:33.320
답은 이겁니다 GPT 4 미니 프론티어 모델 결과죠

09:33.740 --> 09:36.110
다른 건 다 박살 났죠

09:36.110 --> 09:37.250
박살을 냈죠

09:37.250 --> 09:42.770
여기 보시면 79달러가 들어 있어요 58살요

09:42.920 --> 09:52.400
확실히 인간보다 낫고 다른 모든 모델보다 나아요 무작위 숲도 포함해서요

09:52.400 --> 09:58.550
훈련 데이터도 전혀 없이 순수하게 설명만 듣고

09:58.550 --> 10:03.540
토큰 시퀀스를 계속하는 거죠

10:03.540 --> 10:09.360
훈련용 데이터 오염을 테스트할 위험은 있지만 그럴 가능성은 희박합니다

10:09.360 --> 10:13.650
정확히 해낼 경우가 거의 없으니까요

10:13.650 --> 10:17.730
이미 알고 있던 걸 토해낸 게 아니에요

10:17.880 --> 10:25.560
세속적인 지식이 아주 풍부해서 그런 쪽으로 훈련된 거죠

10:25.560 --> 10:32.970
타이어 가격, 전조등 가격 샤워 수도꼭지 등 다른 비용을 알려주는 좋은

10:32.970 --> 10:34.860
관점이 있어요

10:34.860 --> 10:37.620
그게 큰 문제였어요 전혀 알 수가 없었거든요

10:37.710 --> 10:40.260
하지만 아주 좋은 단서가 있었죠

10:40.350 --> 10:46.260
이 작업에 참여한 모든 모델보다 낫다는 걸 알 수 있었죠

10:46.260 --> 10:47.910
정말 멋져요

10:47.910 --> 10:50.940
이 장면을 보는 게 즐거웠어요

10:51.060 --> 10:59.370
다음 영상에서는 수준을 한 단계 높여서 더 큰 사촌이 어떻게 하는지 보죠
