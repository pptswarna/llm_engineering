WEBVTT

00:00.350 --> 00:10.850
そして､ 私たちはJupyter Labに戻り､ 本当に素晴らしいプロジェクトの終了を間近に控えている｡ 

00:10.880 --> 00:12.020
超満足だ｡ 

00:12.050 --> 00:13.130
見るまで待ってくれ｡ 

00:13.160 --> 00:19.250
そこで今回は､ シンプルなエージェントをあと2つ紹介する｡ 

00:19.250 --> 00:20.900
おそらく､ 我々が持っている中で最もシンプルなものだろう｡ 

00:20.930 --> 00:26.270
ひとつはメッセージング・エージェントと呼ばれるもので､ メッセージの送信に使う｡ もうひとつはプランニング・エージェントと呼ばれるもので､

00:26.270 --> 00:28.700
活動の調整を行う｡

00:28.700 --> 00:32.600
そして､ これらのエージェントはどちらも単なるPythonのコードである｡ 

00:32.630 --> 00:38.660
Llmsを使っていないし､ Llmsを使うために強化できない理由もない｡ 

00:38.660 --> 00:44.120
メッセージング・エージェントは通知を送るが､ もちろん､ その前にフロンティア・モデルに素早くコールして､

00:44.150 --> 00:51.830
その特定の取引に関連する､ よりジューシーなものに改良することもできる｡

00:51.830 --> 00:53.690
だから､ ここでできることはたくさんある｡ 

00:53.780 --> 00:56.270
そして計画担当者は､ コードで書かれている｡ 

00:56.270 --> 00:58.820
それをLLMに変えるという実験もできるだろう｡ 

00:58.820 --> 01:01.010
何が起こるか､ それ自体を計画するようになる｡ 

01:01.010 --> 01:04.320
でも､ 少なくとも2人を見て､ すぐに2人を使う｡ 

01:04.740 --> 01:11.670
そして､ そのすべてをエージェントのフレームワークに入れていく｡ 

01:11.670 --> 01:18.630
しかし､ 私たちがすべての構成要素をまとめたので､ エージェントフレームワークを持つ最後の部分は簡単であることは想像できるだろう｡

01:18.630 --> 01:21.150
とても簡単なことだ｡ 

01:21.180 --> 01:24.720
では､ まずメッセージング・エージェントについて話そう｡ 

01:24.720 --> 01:30.240
これは､ 素晴らしい取引を見つけたときにアラートを送ってくれるエージェントだ｡ 

01:30.390 --> 01:33.780
ええと､ もともとはこのためにテキストメッセージを送るつもりだったんだ｡ 

01:33.780 --> 01:41.100
Twilioを使おうと思っていました｡ Twilioは過去に使ったことのある素敵なフレームワークですが､

01:41.100 --> 01:55.380
最近規制が多くて､ Twilioのアカウントを設定してテキストメッセージを送信するのがとても難しくなっています｡

01:55.380 --> 01:59.280
今アメリカにいるのなら､ 他の国ではもっと簡単かもしれない｡ 

01:59.280 --> 02:05.480
ウェブサイトを見る限りでは､ アメリカの規制のせいで､ それが難しくなっているようだ｡ 

02:05.510 --> 02:07.730
Twilioには無料プランがある｡ 

02:07.850 --> 02:11.150
TwilioはWhatsAppメッセージも無料で作成できる｡ 

02:11.150 --> 02:11.660
だから､ 君にあげるよ｡ 

02:11.690 --> 02:16.190
WhatsAppは自分でも使えるようにしたんだけど､ サンドボックスを使用している場合のみ無料で使用できるという制約があり､

02:16.190 --> 02:23.420
1日のうち特定の時間帯にしか使用できないんだ｡

02:23.420 --> 02:24.950
だから理想的ではなかった｡ 

02:24.950 --> 02:26.330
だから大丈夫だった｡ 

02:26.330 --> 02:29.270
コードをここに残しておいたので､ よかったら使ってほしい｡ 

02:29.270 --> 02:34.910
でもそのとき､ プッシュオーバーという実に気の利いたものを発見したんだ｡ 

02:35.000 --> 02:40.850
ええと､ プッシュオーバーのようなものはいくつかあるけど､ プッシュオーバーは私が試したものの中で一番素敵だと感じたものだった｡

02:41.030 --> 02:41.300
うーん｡ 

02:41.300 --> 02:46.910
プッシュオーバーはシンプルなウェブサイトで､ アカウントを作成することができる｡ 

02:46.910 --> 02:48.140
無料だ｡ 

02:48.170 --> 02:50.120
そしてアプリをダウンロードする｡ 

02:50.120 --> 02:51.470
実際､ ウェブサイトに行く必要はない｡ 

02:51.470 --> 02:51.800
できる｡ 

02:51.830 --> 02:54.890
ウェブサイトは「pushover dot net」である｡  comに移籍した｡ 

02:54.920 --> 02:57.080
明らかに余裕がなかったんだ｡  comに移籍した｡ 

02:57.080 --> 02:58.310
まだ可能性はある｡ 

02:58.430 --> 03:00.470
しかし､ プッシュオーバー・ドット・ネットは彼らのウェブサイトだ｡ 

03:00.470 --> 03:02.510
そしてpushoverというアプリがある｡ 

03:02.630 --> 03:04.650
ええと､ 設定は無料です｡ 

03:04.650 --> 03:08.520
少なくとも10,000通までは無料だ｡ 

03:08.790 --> 03:14.670
そして､ この特別なプロジェクトがそれに近づく可能性は低いと思う｡ 

03:14.670 --> 03:19.380
今のところ､ 35通までメッセージを送ることができた｡ 

03:19.620 --> 03:24.990
ええと､ このページがちょっとジャッキーに見えるのは､ この上に僕のトークンが大きく表示されているからで､

03:24.990 --> 03:30.600
特に僕のトークンすべてを皆さんに公開したくなかったので､ 下にスクロールしたんだ｡

03:30.600 --> 03:33.990
あるいは､ 一日中常に私に通知してくるかもしれない｡ 

03:34.290 --> 03:40.590
そうそう､ 無料のプッシュオーバー・アカウントにサインアップしてすぐにトークンを見逃さないようにするのは難しい｡ 

03:40.590 --> 03:46.140
私は関係者ではありませんが､ 本当に､ 本当に役に立っているようです｡ 

03:46.230 --> 03:58.920
サインアップしたら､ トークンを受け取って､ 簡単にプッシュ通知を送ることができる｡

03:58.920 --> 04:02.820
そして､ それぞれのアプリケーションを設定し､ 1つを選ぶだけだ｡ 

04:02.820 --> 04:07.780
そして､ 私のためにそれを保存と呼んだ｡ 

04:08.080 --> 04:09.340
申し訳ないが､ それはできない｡ 

04:09.340 --> 04:14.080
そのためのアプリケーションを設定すると､ トークンが渡される｡ 

04:14.140 --> 04:18.070
それと､ この2つをEMVファイルに追加してください｡ 

04:18.130 --> 04:18.850
素晴らしい｡ 

04:18.850 --> 04:24.400
アプリケーションに関連する画像をアップロードすることもできます｡ 

04:24.400 --> 04:28.570
そして､ 私はコインの山を見回す画像を見つけた｡ 

04:28.570 --> 04:30.820
だから､ それをアップロードしたんだ｡ 

04:30.820 --> 04:35.230
プッシュ通知を受け取ると､ 小さな画像が表示され､ Apple Watchにも表示される｡

04:35.230 --> 04:39.160
画面全体がコインの山になるんだ｡ 

04:39.160 --> 04:40.960
だから､ あなたも同じことをした方がいいかもしれない｡ 

04:40.990 --> 04:43.480
それに合うかわいい画像を見つける｡ 

04:43.510 --> 04:45.100
それを使うならプッシュオーバーだ｡ 

04:45.340 --> 04:51.850
すでにTwilioのアカウントを持っていたり､ Twilioにアクセスして､

04:51.880 --> 05:04.060
どの国からでも参加できることを確認できれば､ プッシュ通知の代わりにSMSテキストメッセージを受け取ることができます｡

05:04.090 --> 05:06.750
しかし､ プッシュ通知はこのために必要なものだ｡ 

05:06.870 --> 05:07.500
オーケー｡ 

05:07.500 --> 05:14.760
そこで､ エージェントの下にあるこのクラスのメッセージング・エージェントに直行することにする｡ 

05:15.120 --> 05:17.430
メッセージングエージェントは､ 私たちのエージェントの一つです｡ 

05:17.430 --> 05:18.090
これだ｡ 

05:18.090 --> 05:19.410
とても簡単なことだ｡ 

05:19.410 --> 05:24.930
これは基本的にTwilio APIとpushover APIのラッパーである｡ 

05:24.960 --> 05:32.580
というのも､ どちらか一方しか設定したくないというわけではなく､

05:32.580 --> 05:41.040
両方設定できるからだ｡

05:41.040 --> 05:49.920
つまり､ initコンストラクタがあり､ これがさまざまな基準を設定する｡ 

05:49.920 --> 06:03.930
私のようにプッシュ通知を行う場合は､ プッシュオーバー・ユーザーとプッシュオーバー・トークンが必要である｡

06:03.930 --> 06:10.930
Twilioを使う場合は､ アカウントIDと認証トークンが必要です｡ 

06:10.990 --> 06:16.630
Twilioの発信元は､ Twilioが教えてくれる番号です｡ 

06:16.630 --> 06:20.260
そして､ テキストメッセージを送信したい電話番号を入力する｡ 

06:20.290 --> 06:23.770
それで､ 私のenvファイルにはこの4つがある｡ 

06:23.770 --> 06:27.760
でも､ ただ書類に記入しただけで使ってはいない｡ 

06:27.760 --> 06:32.890
でも､ 自分宛にテキストメッセージを送る許可はまだ下りていない｡ 

06:32.980 --> 06:35.680
あー､ でもそのうちそうなるといいね｡ 

06:35.680 --> 06:38.950
とりあえず､ プッシュ通知は素晴らしい｡ 

06:38.950 --> 06:48.370
そして､ ここに2つのメソッドがあります｡ メッセージはTwilio APIのラッパーで､ ご覧のようにとてもシンプルです｡

06:48.370 --> 06:51.370
それはTwilioクライアント・ドット・メッセージ・ドット・クリエイトです｡ 

06:51.370 --> 06:55.330
そして､ それが誰から来たのか､ 本文と宛先を書いて､ それで終わりです｡ 

06:55.330 --> 06:56.740
そしてテキストメッセージを送信する｡ 

06:56.740 --> 06:57.580
以前にも使ったことがある｡ 

06:57.610 --> 06:58.750
うまくいくんだ｡ 

06:58.900 --> 07:01.210
テキストメッセージの受信もかなり簡単だ｡ 

07:01.240 --> 07:04.720
ウェブフックと呼ばれるエンドポイントがあればいい｡ 

07:04.840 --> 07:07.640
うーん､ でも､ 明らかにその必要はない｡ 

07:07.940 --> 07:11.600
プッシュ通知も非常にシンプルだ｡ 

07:11.780 --> 07:20.600
でも､ APIは使っていないんだ｡ なぜなら､ 彼らはウェブサイトで､ 意図的なものだと熱心に指摘しているからね｡

07:20.600 --> 07:23.150
彼らはただ､ できるだけわかりやすくしたいだけなのだ｡ 

07:23.150 --> 07:29.180
彼らはサンプルコードでリクエスト・ライブラリさえ使っていない｡

07:29.330 --> 07:35.060
Pythonを使えば､ プッシュ通知を送ることができる｡ 

07:35.180 --> 07:39.950
トークンとメッセージを渡すだけだ｡ 

07:39.950 --> 07:42.680
オプションでサウンドを入れることもできる｡ 

07:42.680 --> 07:48.320
その中のひとつにキャッシュ・レジスターがある｡ 

07:48.320 --> 07:54.080
そして､ 通知を受けるとレジの音がとても心地よく､ とても楽しい｡ 

07:54.260 --> 07:56.240
ええと､ それで全部なんだ｡ 

07:56.240 --> 08:01.910
そして､ ここにアラートメソッドがあり､ テキストかプッシュかに基づいて､

08:01.910 --> 08:04.280
何かを構築して教えてくれる｡

08:04.280 --> 08:08.590
そしてメッセージを送り､ チャンスをつかむ｡ 

08:08.590 --> 08:12.760
だから､ チャンスにパスをすれば､ そのチャンスについてのメッセージが届く｡ 

08:12.790 --> 08:20.350
覚えているだろうか､ 機会とは､ この下で見てきた､ 契約､ 見積もり､ 割引のある対象である｡

08:21.310 --> 08:21.820
分かった｡ 

08:21.820 --> 08:23.410
その前に､ さっそく試してみよう｡ 

08:23.410 --> 08:26.470
このインスタンスを作ればいいんだ｡ 

08:26.470 --> 08:31.720
そして､ 私は大規模なニュースと私の携帯電話がちょうど行ったpingを言うことができるはずだ｡ 

08:31.750 --> 08:38.110
今､ 残念なことに､ 私はマイクにかなり強力なノイズフィルターをかけていて､ 声だけを出すようにしている｡ 

08:38.110 --> 08:42.850
だから､ レジの音が聞こえなかったのだろう｡ 

08:42.850 --> 08:45.790
幸いなことに､ 試してみれば自分の耳で確かめることができる｡ 

08:45.910 --> 08:49.690
あ､ そうそう､ この曲は大好きだから､ もう一度聴きたいんだ｡ 

08:49.930 --> 08:51.400
あ､ そうだ｡ 

08:51.580 --> 08:55.030
そうそう､ 僕の時計は2つあるんだ｡ 

08:55.210 --> 08:57.340
だから､ その...｡ 

08:57.340 --> 09:00.520
ああ､ 実に満足だ｡ 

09:00.520 --> 09:05.350
それがメッセージング・エージェントだ｡ 

09:05.350 --> 09:08.560
また次回､ 企画担当者にお会いしましょう｡ 
