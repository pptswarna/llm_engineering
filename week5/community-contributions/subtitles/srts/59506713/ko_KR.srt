WEBVTT

00:00.680 --> 00:01.790
안녕하세요

00:01.790 --> 00:08.060
7주 차에 제가 이렇게 흥분한 이유는 우리만의 모델을 구축하기

00:08.060 --> 00:10.790
시작했기 때문이죠

00:10.790 --> 00:16.910
우리만의 인공지능을 개발하기 시작하는 시기예요 개척자 모델과 경쟁할

00:16.910 --> 00:23.780
수 있는 제품을 만들려고 해요 적어도 몇몇 개척자 모델보다 나은 제품을 만들려고

00:23.780 --> 00:25.550
노력하죠

00:25.580 --> 00:32.300
그게 가능한 이유는 데이터가 많은 특정 문제를 해결하려 하기 때문이죠

00:32.300 --> 00:38.960
그래서 프런티어 모델보다 훨씬 작은 모델을 쓸 수 있어요

00:38.960 --> 00:41.990
80억 개의 매개 변수 모델을 사용할 수 있어요

00:41.990 --> 00:50.810
한 가지 집중된 작업에서 뛰어난 성과를 내면 거대한 거대 기업과 경쟁할 수 있습니다 GPT

00:50.810 --> 00:53.840
40 같은 거대 기업요

00:54.290 --> 01:00.560
GPT 4에는 수조 개의 매개 변수가 있지만 다양한 용도로 설계되었기 때문입니다

01:00.560 --> 01:04.790
대선 후보에 관한 재치 있는 시를 쓰는 것도 그중 하나죠

01:05.060 --> 01:09.980
이 모든 걸 할 수는 없겠지만 제품 가격을 예측하는 데에

01:09.980 --> 01:12.620
정말 최선을 다할 거예요.

01:12.620 --> 01:13.970
우리만의 방식이죠

01:13.970 --> 01:15.350
그건 우리 사업상의 문제예요

01:15.350 --> 01:17.210
그걸 해결하려고 해요

01:17.240 --> 01:24.170
첫 단계는 어떤 모델을 미세 조정의 베이스 모델로 쓸지 결정하는 겁니다 시간을

01:24.170 --> 01:31.280
들일 가치가 있는 일이죠 우리가 만들 것에 결정적인 역할을 할 테니까요

01:31.670 --> 01:34.880
그 자체로 하나의 거대한 하이퍼 매개 변수라고 생각할 수 있죠

01:34.880 --> 01:38.120
다른 기본 모델을 시험해 보고 어떻게 되는지 보죠

01:38.120 --> 01:45.020
그 일부로 그 훈련받은 모델의 원래 버전을 쓸지 결정해야 해요

01:45.020 --> 01:47.360
바로 그 기본 모델요

01:47.360 --> 01:53.390
사람들은 그걸 설명하기 위해 파운데이션 모델이란 단어를 쓰는데

01:53.390 --> 02:00.860
채팅 목적으로 잘 만들어진 건 반대로 변환이라고도 하죠 사전이나 사전 목록을 기대하는

02:00.950 --> 02:08.360
거예요 사용자 프롬프트 시스템이나 사용자 보조 같은 게 있는 거죠

02:08.370 --> 02:15.120
입력 스타일은 프롬프트의 다른 섹션을 분리하는 토큰 시리즈로

02:15.120 --> 02:16.530
바뀌죠

02:16.530 --> 02:18.540
그래서 결정을 내려야 해요

02:18.540 --> 02:20.520
물론 장단점이 있죠

02:20.700 --> 02:26.550
그 작업이 끝나면 기존의 기본 모델을 가져다가 우리 과제와 어떻게

02:26.550 --> 02:31.920
맞물리는지 봐야 해요 우리가 이미 프런티어 모델과 경쟁하는

02:31.920 --> 02:34.950
위치에 있는지 알 수 있으니까요

02:34.950 --> 02:40.320
우리가 개척 시대 모델들과 경쟁하지 않더라도 무료로 진행될 거라는 걸 기억하세요 적어도

02:40.320 --> 02:42.030
비용은 우리가 부담해야죠

02:42.030 --> 02:48.330
계산을 실행해 API 비용을 내지 않아도 되죠 고유의 오픈 소스 버전 모델을 실행할

02:48.330 --> 02:48.840
때요

02:48.840 --> 02:54.210
따라서 올바른 영역에 있다 해도 오픈 소스를 써야 할 이유는 여전히 많아요

02:54.210 --> 03:00.600
이런 특정 비즈니스 문제에 특화된 독점 모델로 만들자는 얘기가 나오기 전부터요

03:00.600 --> 03:05.910
어쨌든 그걸 염두에 두고 어떤 모델을 사용할지 얘기해보죠

03:06.060 --> 03:09.420
우선 매개 변수를 몇 개 쓸지 정해야 해요

03:09.420 --> 03:13.830
많을수록 좋은 것 같아요

03:13.860 --> 03:19.140
매개 변수가 많을수록 문제 해결에 도움이 돼요

03:19.140 --> 03:25.800
특히 훈련 데이터가 많은 현재 세계에서는 400,000개의 예가

03:25.830 --> 03:26.670
있어요

03:26.670 --> 03:28.980
훈련 데이터가 아주 많아요

03:28.980 --> 03:31.020
그런 면에서 한계가 있는 건 아니잖아요

03:31.020 --> 03:33.180
원하면 언제든 더 만들 수 있어요

03:33.210 --> 03:39.270
그래서 제약 조건은 우리가 가진 메모리 용량의 양이 될 거예요

03:39.300 --> 03:42.270
작은 상자에 넣을 거예요

03:42.300 --> 03:49.740
지금까지는 이미 알고 있었어요 약 80억 개의 매개 변수 모델을 얻을 수 있다는 것을요.

03:49.770 --> 03:51.150
70억에서 80억 매개 변수죠

03:51.150 --> 03:53.430
그 이상은 못 가요

03:53.460 --> 03:59.850
작은 매개 변수 모델이 있긴 하지만요 아주 작죠 젬마 같은 경우 20억에서 30억

03:59.850 --> 04:02.400
개의 매개 변수 버전일 거예요

04:02.400 --> 04:04.080
잠시 후에 살펴보죠

04:04.230 --> 04:12.660
8대를 가져가려고 해요 저희 예산에 맞는

04:12.660 --> 04:16.510
가장 큰 모델로요

04:16.660 --> 04:22.930
그게 저희가 베이스나 변형을 만들 때 접근하는 방식이죠

04:22.930 --> 04:26.710
장단점이 있는데 실험해 볼 만한 거예요

04:26.740 --> 04:35.500
일반적으로, 한 가지 문제에 대해서만 미세 조정할 수 있습니다 특정 프롬프트를 이용하고 있고 특정

04:35.500 --> 04:41.230
방식으로 응답을 기대한다면 기본 모델로 시작하는 것이 좋습니다

04:41.230 --> 04:48.640
변종은 아닙니다 시스템 프롬프트나 사용자 프롬프트 같은 것을 적용할 필요가 없습니다

04:48.640 --> 04:53.200
한 가지 목적으로만 훈련시킬 것이기 때문이죠

04:53.230 --> 05:00.490
그러니 기본을 하나 골라서 미세 조정하세요 그 작업에만 정말 잘하도록요

05:00.490 --> 05:02.680
그게 기본 대답이에요

05:02.710 --> 05:06.850
변종으로 시작하면 좋은 점이 있어요

05:06.850 --> 05:08.890
하나는 아주 맛있다는 거죠

05:08.950 --> 05:15.220
시스템 프롬프트나 사용자 보조 상호 작용 같은 걸 인식하도록 훈련받았죠

05:15.220 --> 05:20.710
이를 장점으로 활용할 수 있습니다 시스템 프롬프트를 이용해

05:20.710 --> 05:28.150
특정 방식으로 틀을 잡고 작업하는 거죠 인격에 의존하지 않고 훈련 데이터를 통해

05:28.150 --> 05:31.210
인격을 익히는 거예요

05:31.210 --> 05:37.300
그래서 변형 구성이 더 나은 출발점이 되는 상황도 있어요

05:37.450 --> 05:46.450
제 직감으로는 기초가 더 나은 출발점입니다 훈련 데이터와 목표에

05:46.450 --> 05:51.610
사용할 정해진 구조가 있으니까요

05:51.880 --> 05:58.120
사실 둘 다 써봤는데 밑바탕이 개별 제품보다 조금 더 잘 나왔어요 하지만 막상막하였죠

05:58.180 --> 06:02.770
어, 둘 다 해 보시고 저랑 같은 결과가 나오는지 확인해 보세요 Get up

06:02.770 --> 06:09.070
하지만 이런 상황에서는 더 정상적일 것 같아요 하나의 특정 작업이 있는데

06:09.070 --> 06:15.040
시스템 프롬프트를 적용할 필요가 없을 때요 그런 경우 기본 변종에서

06:15.040 --> 06:16.090
시작하죠

06:16.600 --> 06:23.470
소개를 마쳤으니 이제 안아주는 얼굴로 넘어가죠 오픈 leaderboard에서 모델들을 살펴볼게요

06:23.470 --> 06:24.670
HOLO
