WEBVTT

00:00.530 --> 00:01.130
글쎄요

00:01.130 --> 00:01.730
안녕하세요

00:01.730 --> 00:07.520
8주 차 중 이틀째예요 지금까지 버텨줘서 정말 고마워요 4일

00:07.520 --> 00:11.090
더 남은 시점에 도달했다는 것도요

00:11.090 --> 00:18.050
한마디만 하자면 오늘 코스가 전체 코스 중 가장 힘들 거예요

00:18.050 --> 00:22.250
오늘 하루를 무사히 넘기고 모든 걸 파악하고 코드를 실행하고

00:22.250 --> 00:27.860
모든 게 말이 된다면 여러분은 이미 LM 엔지니어링을 통달한 거예요

00:27.860 --> 00:29.060
이게 핵심이에요

00:29.090 --> 00:30.530
오늘은 힘들 거예요

00:30.710 --> 00:31.940
준비하세요

00:32.060 --> 00:35.780
하지만 정말 재미있을 거예요

00:35.780 --> 00:38.600
Get in get 멋진 성과를 거두게 될 거예요

00:38.600 --> 00:45.020
LM 마스터링까지 8주 여정이 4일 남았네요

00:45.050 --> 00:46.610
이제 거의 다 왔어요

00:46.610 --> 00:52.070
물론 이미 오픈 소스 모델로 텍스트와 코드를 생성할 수 있고 얼굴을 앞으로

00:52.100 --> 00:58.610
당길 수 있으며 기본 모델을 만들기 어려운 큐레이팅 데이터 집합으로 문제를 해결하는

00:58.610 --> 01:04.340
전략을 따를 수 있고 오픈 소스 LMS를 미세 조정하는 풀-엔드 투-엔드

01:04.410 --> 01:07.770
프로세스를 수행할 수 있죠

01:07.860 --> 01:14.640
마지막으로, 지난번에 한 건 잘 조정된 LMS를 프로덕션에 배포하는 거였죠

01:14.670 --> 01:15.750
우린 모듈을 써요

01:15.750 --> 01:20.400
다른 것도 많지만 Modal도 훌륭합니다 간단한 파이썬 코드를

01:20.400 --> 01:23.220
작성해서 로컬에서 실행할 수 있죠

01:23.220 --> 01:28.470
로컬에서 실행되는 것처럼 보이지만 사실은 클라우드에서 실행되는 모델에

01:28.470 --> 01:30.270
호출하는 거예요

01:30.300 --> 01:32.910
사용료만 지불하는 거죠

01:33.360 --> 01:43.770
오늘은 추가로 가격 모델을 살펴봅니다 최종 가격 모델을 만드는 동안에요

01:43.770 --> 01:48.330
그게 앙상블이 될 거예요 여러 모델을 합친 거죠

01:48.330 --> 01:55.230
다시 Rag로 돌아가 거대한 크롬 데이터 스토어에 대항할 프런티어 모델

01:55.260 --> 01:58.110
솔루션을 개발할 거예요

01:58.140 --> 02:00.870
그리고 전과는 다르게 랑체인을 사용하지 않을 거예요

02:00.870 --> 02:06.390
벡터 스토어에서 직접 찾아보고 프롬프트를 구축하는데 사용합니다,

02:06.390 --> 02:07.380
좋은 일이죠

02:07.380 --> 02:11.320
이불 밑의 일을 정확히 이해하게 돼서 좋네요

02:11.650 --> 02:17.380
그런 다음 높은 수준의 전문성을 가진 이 앙상블 모델을 만들 겁니다 그리고 생산

02:17.380 --> 02:21.370
준비 코드를 제공하고 여러 모델을 호출할 수 있죠

02:21.370 --> 02:26.680
여기서 가장 중요한 건 우리가 하는 많은 일이 이전에 해 본

02:26.680 --> 02:31.090
일을 반복하는 것이긴 하지만 좀 더 산업적인 방식으로요

02:31.120 --> 02:35.290
비트를 더 탄탄하게 만드는 거죠

02:35.290 --> 02:41.020
LM 엔지니어링의 다양한 측면에서 상당히 확신하는 지점에서 고급으로

02:41.020 --> 02:47.290
가는 겁니다 그러니 코드를 검토할 시간을 갖고 이걸 기회로 삼아 연습,

02:47.290 --> 02:54.100
연습, 연습 진정한 전문 지식을 구축했다는 느낌이 들도록 하세요

02:54.850 --> 02:55.390
좋아요

02:55.390 --> 02:59.530
우리가 작업하는 프로젝트가 뭔지 다시 한 번 보죠

02:59.560 --> 03:07.000
가격은 오른쪽 프로젝트라는 자율적 에이전트 프레임워크를 구축하는 겁니다 에이전트

03:07.000 --> 03:14.080
워크플로는 온라인 거래가 공개될 때를 주시하고 가격을 예측하고 가격에 따라

03:14.080 --> 03:20.410
푸시 알림을 보냅니다 여러 에이전트가 문제를 해결하기 위해 협업할 겁니다

03:20.410 --> 03:30.670
그중에는 개척자 단속 모델인 미세 튜닝 모델도 있습니다 GPT 4와 클로드보다 현저히 뛰어나죠

03:30.700 --> 03:37.390
지난번에 이 다이어그램을 보여드린 걸 기억하실 겁니다 에이전트 워크플로를 보여드렸죠 왼쪽은 사용자

03:37.390 --> 03:43.960
인터페이스 우리가 사용할 프레임워크입니다 에이전트가 활동을 조율하도록 계획하는 거죠

03:43.960 --> 03:50.830
그리고 유망한 계약을 찾아주는 스캐닝 요원 세 명 앙상블 가격 산정 푸시

03:50.830 --> 03:54.640
알림을 보내줄 메시지 요원 한 명요

03:54.760 --> 04:01.150
이건 약간 단순화됐다는 걸 말씀드리고 싶었어요 앙상블 비트 자체가 세 가지

04:01.150 --> 04:03.520
모델을 부를 테니까요

04:03.520 --> 04:11.710
프런티어 에이전트를 호출할 거예요 검색할 수 있는 많은 기존 제품 인벤토리에 기반을

04:11.710 --> 04:15.430
둔 가격 매기는 래그 워크플로우죠

04:15.440 --> 04:18.170
걸레로 쓰기 딱 좋아요

04:18.200 --> 04:23.090
물론 제가 말씀드린 대로 이미 생각해 보셨을 테니 왜 이걸 시도도 안 했나 궁금하실

04:23.090 --> 04:24.050
거예요

04:24.080 --> 04:24.800
그렇게 될 거예요

04:24.830 --> 04:31.430
오늘 앙상블 에이전트는 우리가 이미 만들어둔 특수 에이전트를 사용할 거예요 대표할

04:31.460 --> 04:38.330
특수 에이전트 클래스 같은 거죠 임의 숲 에이전트를 사용할 건데 전통적인 머신 러닝

04:38.330 --> 04:42.800
접근법으로 임의 숲 에이전트를 만들 거예요

04:42.830 --> 04:44.690
반전이 있을 거예요

04:44.720 --> 04:49.910
변압기 구조를 사용할 벡터 내장화를 사용할 거예요

04:49.910 --> 04:54.110
전통적인 ML을 현대적으로 재해석한 거군요

04:54.290 --> 05:00.320
기본적으로 오늘은 저기 빨간 아이콘들을 작업할 거예요

05:00.320 --> 05:02.060
앙상블 에이전트를 만들 거예요

05:02.060 --> 05:03.740
특수 요원은 이미 만들었어요

05:03.740 --> 05:09.050
나머지 둘은 오늘 정복에 참여할 거예요

05:09.050 --> 05:15.290
그리고 오늘 마무리로 앙상블 에이전트가 가격을 계산하고 다른 평가자 여럿을

05:15.290 --> 05:16.910
끌어들일 거예요

05:16.940 --> 05:18.230
그게 도전 과제죠

05:18.230 --> 05:20.150
Get it JupyterLab으로 가죠
