WEBVTT

00:00.890 --> 00:04.100
다시 도전 과제를 시작하죠

00:04.130 --> 00:08.000
이번에는 아름다운 프로토타입을 준비했어요

00:08.060 --> 00:16.400
이번에는 파이썬 하드 챌린지로 기본 설정합니다 간단한 파이 코드보다는요

00:16.400 --> 00:17.750
이걸 꺼내요

00:17.750 --> 00:18.800
여기 있네요

00:18.800 --> 00:25.910
파이썬 실행을 시작하겠습니다 기억하실지 모르겠지만 2720 8초가 걸리죠

00:25.910 --> 00:27.620
여기 좀 앉아 있어야겠어요

00:27.620 --> 00:34.430
실행되는 동안 GPT를 이용해 코드를 C++로 변환하고 실행할게요

00:34.430 --> 00:40.580
클로드가 어떻게 하는지 보고 지난번과 다른 점이

00:40.580 --> 00:42.200
있는지 보죠

00:42.590 --> 00:44.060
거의 다 왔어요

00:44.060 --> 00:48.080
그라디오가 타이머를 주는 걸 보세요 이런 상황에서 아주 편리하죠

00:48.080 --> 00:49.790
알게 될 겁니다 됐어요

00:49.820 --> 00:52.070
Get it, get it, get it, get it, get it, get it, get it, get it, get it, get, get 정답, 정답이 나왔어요

00:52.070 --> 00:54.530
28초 정도 걸렸어요

00:54.560 --> 00:55.250
좋아요

00:55.250 --> 00:58.370
GPT에 이걸 C 플러스 플러스 코드로 변환하라고 했어요

00:58.370 --> 01:00.440
C 플러스 플러스 코드예요

01:00.560 --> 01:02.420
결과가 나왔네요

01:02.420 --> 01:06.110
그런 다음 C++ 코드를 실행하죠

01:07.820 --> 01:10.460
예전과 같은 문제가 있어요

01:10.490 --> 01:17.930
숫자가 넘쳐나서 답이 0이 된 것 같아요 그렇게 빠르지도 않고요

01:17.930 --> 01:23.870
왜냐하면 그 답에 0을 주는데 중첩된 루프도 발생하거든요

01:23.870 --> 01:26.090
클로드가 어떻게 하는지 보죠

01:26.090 --> 01:29.210
클로드로 바꿔서 코드를 변환해요

01:34.850 --> 01:35.900
시작할게요

01:39.650 --> 01:41.690
클로드가 뭘 했는지 보러 가요

01:42.560 --> 01:43.370
네

01:44.270 --> 01:50.870
흥미롭게도 클로드는 단일 회전을 할 수 있다는 걸 못 봤어요

01:50.870 --> 01:54.230
클로드의 대답이 이번에는 달라요

01:54.440 --> 01:54.980
됐어요

01:55.010 --> 01:58.550
코드가 작동하는지 클로드가 어떻게 하는지 보죠

01:58.550 --> 02:00.560
C 플러스라도 해 보죠

02:00.560 --> 02:06.470
게다가 정답도 맞혔고 0점이었어요 6초요

02:06.470 --> 02:09.770
클로드가 정답을 맞혔네요

02:09.770 --> 02:12.260
이번엔 아니에요

02:12.260 --> 02:13.730
이번에는 클로드와 달렸죠

02:13.730 --> 02:21.830
지난번처럼 실패하진 않았어요 캐논 알고리즘을 이용해 루프를 무너뜨릴 기회를

02:21.830 --> 02:24.570
포착하지 못했거든요

02:24.930 --> 02:26.460
이 요리의 이름을 기억하세요

02:26.820 --> 02:33.240
코드를 한 번 더 변환해 두 번째 시도에 성공하는지 보죠

02:33.480 --> 02:34.350
어디 보죠

02:34.350 --> 02:35.760
어디 봐요

02:37.590 --> 02:39.510
한 바퀴 도는 것 같죠?

02:39.510 --> 02:39.870
좋아요

02:39.870 --> 02:43.470
이 정도면 될지 보죠

02:44.160 --> 02:45.330
효과가 있었어요

02:45.330 --> 02:46.560
두 번째는 운이 좋았어요

02:46.590 --> 02:47.910
두 번째는 운이 좋았어요

02:47.940 --> 02:49.320
Get it, Get it 정답이 나오죠

02:49.320 --> 02:52.110
숨막히게 아름다운 장면이죠

02:52.140 --> 02:52.980
말도 안 돼요

02:53.010 --> 02:55.200
지난번보다 훨씬 나아요

02:55.350 --> 02:59.970
제 프로세서에 실행되는 다른 것들에 의존성이 있어요

02:59.970 --> 03:07.650
소음 수준으로 떨어졌지만 0이에요 4분의 1초요, 비교하면...

03:07.650 --> 03:11.640
계산을 다시 해 보죠

03:11.640 --> 03:16.680
머리로 규모를 계산할 수 없다는 게 부끄럽지만 너무 많이 계산하지 않을까

03:16.680 --> 03:18.750
봐 두려워요. Get it.

03:18.780 --> 03:25.200
28살요 3 나누기 0은요? 000446년요

03:25.560 --> 03:29.760
60,000배 이상 빨라요

03:29.760 --> 03:33.900
물론 그리 놀라운 일은 아니죠 중첩된 루프가 아닌 싱글 루프를

03:33.900 --> 03:37.560
포함한 알고리즘을 찾았으니까요 하지만 보기 좋네요

03:37.560 --> 03:44.040
요약하자면 클로드는 GPT 4가 실패한 일을 해냈죠

03:44.040 --> 03:49.800
클로드는 항상 빠른 건 아니지만 가끔은 엄청나게 빨라요

03:49.800 --> 03:54.390
숨이 막힐 정도로요 실험을 하면서 클로드가 회전하는 숫자를

03:54.390 --> 03:59.850
틀리는 경우가 몇 번 있었어요 클로드와 GPT 40 둘 다 0이 나왔죠

03:59.850 --> 04:02.670
GPT 40은 계속 그런 실수를 반복하는 것 같아요

04:02.670 --> 04:09.210
클로드는 종종 그걸 제대로 해낼 뿐 아니라 알고리즘을 다시 쓸 기회를 포착해

04:09.210 --> 04:12.090
놀랍도록 빠르게 만들죠

04:12.090 --> 04:18.030
그래서 전 다시 강조해요 클로드의 승리라고요

04:18.180 --> 04:22.890
다음 주에는 오픈 소스로 전환할 거예요

04:22.890 --> 04:25.080
오픈 소스 모델을 평가할 거예요

04:25.080 --> 04:32.040
오픈 소스 모델이 어떻게 코드를 생성하고 오픈 소스 LMS 솔루션을 사용하는지 보죠

04:32.040 --> 04:36.630
오픈 소스가 클로드와 경쟁할 수 있을까요?

04:36.660 --> 04:38.310
3번요 5 소네트요

04:38.370 --> 04:42.840
이렇게 놀라울 정도로 빠른 결과로요

04:43.290 --> 04:44.010
그때 봐요
