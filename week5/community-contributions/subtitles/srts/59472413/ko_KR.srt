WEBVTT

00:01.160 --> 00:02.000
좋아요

00:02.000 --> 00:09.890
멈춘 곳에서 기능 Get 기능을 만들었죠 4가지 기능으로 기능 사전을 만드는

00:09.890 --> 00:11.180
거예요

00:11.210 --> 00:20.180
한 번 보죠 기능을 get 요청해 초기 훈련 지점을 호출하는 거예요

00:20.180 --> 00:24.980
Get을 누르면 이 멋진 사전이 나와요

00:25.010 --> 00:28.100
2파운드예요 무게로 2kg이에요

00:28.100 --> 00:30.380
그게 평균 등급이죠

00:30.410 --> 00:32.510
텍스트의 길이예요

00:32.510 --> 00:35.510
일류 전자 제품 브랜드도 아니고요

00:35.510 --> 00:39.620
그래서 우리가 만든 건 다소 빈약한 형태가 됐죠

00:39.830 --> 00:42.980
더 잘할 수 있어요 더 잘하도록 해요

00:43.220 --> 00:43.970
좋아요

00:44.000 --> 00:47.660
이제 머신 러닝을 할 거예요

00:47.660 --> 00:54.260
항목 목록을 데이터 프레임으로 변환하는 유틸리티 함수가 있어요

00:54.290 --> 00:55.730
팬더스 데이터 프레임이에요

00:55.730 --> 01:00.710
자세히 설명하진 않겠습니다 전통적인 머신 러닝 과목이 아니니까요

01:00.920 --> 01:05.990
데이터 프레임에 대해 잘 아신다면 훈련 데이터와 테스트 데이터 프레임에

01:05.990 --> 01:11.690
사용합니다 테스트 데이터 세트에서 상위 250포인트를 고르는 거죠

01:12.020 --> 01:13.250
자, 됐어요

01:13.280 --> 01:16.490
변환 작업을 했고 이제 비즈니스가 시작됐어요

01:16.490 --> 01:20.330
전통적인 선형 회귀를 실행하는 곳이죠

01:20.750 --> 01:23.900
특징을 설정하죠

01:24.170 --> 01:28.880
기능의 열 이름을 지정해요

01:28.910 --> 01:31.250
모든 액션이 일어나는 곳이죠

01:31.250 --> 01:35.840
모델 = 선형 회귀는 우리가 선형 회귀 모델을 원한다는 뜻이죠

01:35.840 --> 01:45.050
그 모델을 엑스 값, 기능, y 값에 맞추는 건 훈련 데이터 집합의 실제 가격이에요

01:45.080 --> 01:50.540
여기서 액션이 일어나고 모델이 실제로 맞는 거죠

01:50.720 --> 01:57.980
그런 다음 특징과 계수 무게를 출력하죠

01:57.980 --> 02:02.870
그걸 보면서 각 특징이 얼마나 중요한지 알 수 있죠 get get get get it

02:02.900 --> 02:09.380
그런 다음 테스트 세트에서 예측을 실행합니다 평균 제곱 에러와 R 제곱을 얻기

02:09.380 --> 02:14.810
위해서요 여러분 중 데이터 과학자들이 그걸 보고 싶어 하니까요

02:14.810 --> 02:19.940
하지만 걱정 마세요, 곧 보게 될 테니까요 우리가 전에 만든 프레임워크를 이용해서요

02:19.970 --> 02:22.070
같은 그래프에 나타나요

02:22.070 --> 02:27.710
평균 모델과 비교해서 어디서 나올지 추측해 보세요

02:27.710 --> 02:31.460
우리가 이기려고 하는 걸 상기시키기 위해 평균 모델을 잠깐 보죠

02:31.460 --> 02:37.310
평균 오차는 145달러 146센트죠

02:37.310 --> 02:41.960
선형 회귀가 평균보다 나아졌으면 좋겠어요

02:41.960 --> 02:42.620
어디 보죠

02:42.650 --> 02:44.000
일단 해 보죠

02:45.470 --> 02:46.460
금방 끝나요

02:47.090 --> 02:53.030
계수와 무게에 따라 무게가 달라지면 무게가 작아지다가

02:53.030 --> 02:58.100
양극이 되는 걸 알 수 있어요

02:58.130 --> 03:01.400
순위가 더 커졌어요

03:01.400 --> 03:05.450
텍스트 길이가 아주 작고 신호도 아주 낮아요

03:05.480 --> 03:07.460
최고의 전자제품 브랜드인가요?

03:07.490 --> 03:08.690
큰 차이가 있죠

03:08.720 --> 03:11.210
톱 전자 제품은 많이 받아요 Get it

03:11.720 --> 03:20.540
이제 이걸 함수로 래핑할 거예요 이걸 테스트용 시각화기에 사용할

03:20.540 --> 03:23.060
거거든요

03:23.060 --> 03:26.530
선형 회귀 프라이서라는 함수로 감싸요

03:26.560 --> 03:32.710
그런 다음 우린 그냥∙∙∙ 항목을 전달하죠

03:32.710 --> 03:34.720
해당 아이템의 기능을 get 할 거예요

03:34.720 --> 03:37.030
그걸 데이터 프레임으로 변환할 거예요

03:37.030 --> 03:43.030
그런 다음 선형 회귀 모델을 불러 어디서 올지 예측하죠

03:43.060 --> 03:45.220
어떻게 되는지 보죠

03:45.490 --> 03:47.560
테스터요, 점 테스터

03:49.000 --> 03:51.400
선형 회귀 프라이저예요

03:53.380 --> 03:54.550
마음의 준비 됐어요?

03:54.580 --> 03:55.990
평균을 기억하세요

03:55.990 --> 03:56.860
시작할게요

03:57.010 --> 04:00.970
그 전에 감옥을 실행해요

04:01.480 --> 04:04.270
제가 몇 번이나 그랬죠?

04:05.650 --> 04:06.340
좋아요!

04:06.340 --> 04:08.680
색깔이 보이네요

04:08.680 --> 04:13.210
붉은색이 많이 보이는데 전보다 녹색이 더 많아요

04:13.240 --> 04:15.190
그렇게 끔찍하진 않았을 거예요

04:15.190 --> 04:17.050
제대로 하고 있어요

04:17.470 --> 04:18.490
어디 보죠

04:18.520 --> 04:20.500
자, 다 됐어요

04:20.530 --> 04:23.860
평균보다 약간 더 비트 박스가 잘 나왔어요

04:23.860 --> 04:25.480
비트보다 조금 더 낫네요

04:25.480 --> 04:32.740
실제로 결과를 보시면 기본적으로 여기에 약간 증가한 것을 볼 수 있습니다. 하지만

04:32.740 --> 04:40.250
평균 점 부근에 클러스터되어 있습니다. 어떤 점들은 약 200달러 더 증가하고요.

04:40.250 --> 04:41.600
그거 알아요?

04:41.600 --> 04:47.900
전자 제품 브랜드가 최고라는 걸 보여주는 제품들이 될 거예요

04:48.170 --> 04:53.300
그래서 약간 들뜬 상태였고 한 시점에서 잘 풀렸어요

04:53.300 --> 04:57.950
하지만 그 외에는 모델에게 도움이 되지 않았어요

04:58.160 --> 05:00.680
최선을 다했어요

05:00.710 --> 05:06.890
139... 에러가 났네요

05:06.890 --> 05:09.170
그리고 히트 쳤죠

05:09.200 --> 05:13.040
16% 정도는 녹색이었어요

05:13.340 --> 05:15.410
이게 우리 선형 회귀 모델이에요

05:15.410 --> 05:16.580
더 잘할 수 있잖아요

05:16.610 --> 05:17.300
들어오세요

05:17.330 --> 05:18.920
이제 기능을 설계해 보죠

05:18.920 --> 05:20.810
새롭진 않죠

05:20.930 --> 05:22.100
좋아요

05:22.250 --> 05:27.650
기본 지식을 쌓는 것도 좋지만 구식 기능 공학도

05:27.650 --> 05:28.730
좋아요

05:28.730 --> 05:33.200
게다가 LMS로 작업을 시작하면 훨씬 더 만족스러울 겁니다 어떻게 되는지

05:33.200 --> 05:33.710
보죠

05:33.710 --> 05:37.250
들어가서 기능들을 만들어 보세요

05:37.250 --> 05:42.890
하지만 다음 시간에는 좀 더 정교한 기본 모델을 살펴볼 거예요

05:42.890 --> 05:43.820
그때 봐요
