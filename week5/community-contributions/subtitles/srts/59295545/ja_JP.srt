WEBVTT

00:00.350 --> 00:02.270
今週も楽しんでもらえると嬉しい｡ 

00:02.270 --> 00:03.800
何度もやっている｡ 

00:03.800 --> 00:11.120
私たちはあらゆる種類の新しいテクニックやモデルを試してきた｡

00:11.270 --> 00:17.660
この時点で､ AIアシスタントを含むフロンティア・モデルをコーディングできるだけでなく､ リーダーボード・アリーナからの指標に裏打ちされたプロジェクトに適したモデルを選択できるだけでなく､

00:17.660 --> 00:31.640
フロンティア・モデルやオープンソース・モデルをコード生成に使用したり､ ツールベルトに追加するちょっとしたツールとして使用することもできる｡

00:31.670 --> 00:41.750
Hugging Faceの推論エンドポイント機能を使って､ 推論エンドポイントとしてモデルをデプロイすることもできる｡ 

00:41.750 --> 00:45.470
おめでとう｡ 

00:45.620 --> 00:51.440
そして､ おそらく私のように､ オープンソースがまったく及ばなかったことに少しがっかりしているのだろうが､

00:51.440 --> 00:54.080
それはそれで立派な仕事だった｡

00:54.080 --> 00:55.280
とても楽しかった｡ 

00:55.280 --> 01:02.690
また､ PythonをC＋＋＋に最適化する多くの作業では､ Codexが素晴らしいことがわかるだろう｡ 

01:02.750 --> 01:17.810
でも結局のところ､ 70億のパラメータを持つモデルを､ 1よりはるかに多いパラメータと比較することになるんだ｡

01:17.810 --> 01:17.810
76兆のパラメーターモデル､ GPT4とGPT4とクロード3だった｡  5ソネットはもっと大きいと考えられている｡

01:19.070 --> 01:22.880
特にフェアな試合ではなかったね｡ 

01:22.880 --> 01:28.580
そのような状況の中で､ コーデックスは本当によくやったと思う｡ 

01:28.640 --> 01:34.940
次回は､ オープンソースとクローズドソースのモデルの比較､ パフォーマンス､ コード生成のさまざまな商用ユースケースについて､

01:34.940 --> 01:46.760
そしてあらゆる種類のタスクにこの種のコード生成技術を使用するソリューションを構築できるようになることについて話す予定だ｡

01:46.760 --> 01:47.840
楽しみにしているよ｡ 

01:47.840 --> 01:48.710
それじゃ､ また
