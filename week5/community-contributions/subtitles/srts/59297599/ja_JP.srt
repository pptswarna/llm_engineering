WEBVTT

00:00.350 --> 00:03.320
まあ､ 前作で君を連れて行ったのは､ 卑劣な回り道だったね｡ 

00:03.320 --> 00:08.270
でも､ 楽しんでもらえたならうれしいし､ 満足してもらえたなら､ そしてその週を遊びつくしてもらえたらうれしい｡

00:08.270 --> 00:10.760
4. 5日目 4. 今は5だ｡ 

00:10.850 --> 00:29.870
ラング・チェーンは､ パイプラインを解決するためにパズルの様々なステップをつなぎ合わせていくものです｡

00:30.020 --> 00:37.160
そして､ あなたが達成しようとしていることを宣言的なスタイルで表現したファイルを作成することで､

00:37.160 --> 00:38.750
それが可能になる｡

00:38.930 --> 00:45.830
つまり､ このLCLのチェーン表現言語は､ やりたいことをレイアウトするために使うことができるのだ｡ 

00:45.950 --> 00:47.690
YAMLファイルの形式だ｡ 

00:47.690 --> 00:50.420
もしあなたがYAMLファイルに慣れていて､ 以下のように見えるなら｡ 

00:50.420 --> 00:56.570
これを読むと､ ベクター・データベースの永続的なディレクトリとなる､

00:56.570 --> 01:03.500
温度とディレクトリを持つモデルを指定していることがわかる｡

01:03.530 --> 01:10.130
LMはチャットタイプで､ オープンAIだ｡ 

01:10.160 --> 01:12.350
私たちは会話の記憶を持っている｡ 

01:12.380 --> 01:18.110
我々は､ オープンAIエンベッディング､ クロマベクトルストア､ レトリーバー､ チェーン､ そしてアウトプットを持っている｡ 

01:18.110 --> 01:24.530
私たちが書いたPythonのコードと､ このコードがいかに密接に対応しているかがおわかりいただけたと思う｡ 

01:24.530 --> 01:31.310
そして､ この種の宣言的モデルを組み合わせることで､ あらゆる種類の問題を解決できることが想像できるだろう｡

01:31.310 --> 01:37.970
つまり､ 非常にパワフルな言語であり､ それに時間を費やしてきた人々によるものなのだ｡ 

01:37.970 --> 01:41.330
現時点では非常に生産的だと思う｡ 

01:41.360 --> 01:48.080
個人的な好みとしては､ Pythonのコードにこだわって､ 以前と同じようにワークフローをまとめるのに使いたい｡

01:48.320 --> 01:52.310
しかし､ もしこのことに興味があるのであれば､ このことをもっと調べて､ 代替案として検討することもできるだろう｡ 

01:52.310 --> 01:57.350
そして､ もし他のプロジェクトでこのようなことに出くわしても､ できれば動揺しないでほしい｡ 

01:57.380 --> 02:12.700
Pythonのコードにかなり近い形でマッピングされているので､ 次はLang Chainが舞台裏でどのように動いているのかについて少しお話ししたいと思います｡

02:13.030 --> 02:16.330
あー､ ランシャンはトンマジックをやっていない｡ 

02:16.330 --> 02:18.460
実に便利だ｡ 

02:18.460 --> 02:25.510
しかし実際には､ クロマやファイズといったさまざまな基礎コンポーネントに適切なコールをするだけだ｡

02:25.540 --> 02:31.540
適切なドキュメントを検索し､ それをプロンプトにつなぎ合わせる｡ 

02:31.540 --> 02:36.700
コールバックと呼ばれるものを使って､ ラングシャンがOpenAIに送信したプロンプトが何であったかを教えてもらう方法を､

02:36.730 --> 02:41.260
ちょっとお見せしましょう｡

02:41.290 --> 02:46.540
つまり､ 何らかの理由で正しいチャンクがモデルに送られなかったり､

02:46.540 --> 02:59.770
少なくとも本当に欲しいチャンクが送られなかったりした場合に起こる問題だ｡

02:59.800 --> 03:07.360
では､ その問題を解決して､ 最後に､ ランシャンが提供してくれるインフラ全体を解明することについて､

03:07.360 --> 03:10.300
少し考えてみよう｡

03:10.330 --> 03:15.160
それでは､ 5日目のJupyterLabに戻ることにしよう｡ 
