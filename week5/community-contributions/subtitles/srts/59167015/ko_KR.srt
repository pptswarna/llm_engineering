WEBVTT

00:00.800 --> 00:05.960
주피터 연구소에 잘 오셨습니다 파이브의 연구실에도요

00:05.960 --> 00:12.020
창의력이 많이 발휘될 거고 오락성도 많으면 좋겠어요

00:12.020 --> 00:16.910
우선 4일째의 주피터 연구소를 모사했어요

00:17.030 --> 00:19.370
그걸 복사했어요

00:19.370 --> 00:20.420
그리고 확장했어요

00:20.420 --> 00:23.570
지금 여기 위로는 나흘째의 반복이에요

00:23.600 --> 00:31.670
우리 항공사의 AI 보조를 만들었어요 비행기 AI라고 불렀죠 그리고 비행기 표 가격을 알아낼

00:31.670 --> 00:33.590
도구를 장착했어요

00:33.590 --> 00:39.140
모든 게 이미 갖춰져 있고 오늘 공연에 맞게 완성했어요

00:39.140 --> 00:40.820
다중 모듈로 갈 거예요

00:40.820 --> 00:46.250
달레3을 사용할 건데요 GPT 4 뒤에 있는 이미지 생성 모델이에요

00:46.760 --> 00:48.800
이미지를 만드는 데 사용할 거예요

00:48.800 --> 00:52.790
아티스트라는 함수에 넣는 것으로 시작하죠

00:52.790 --> 00:57.770
그 전에 두 가지 서비스 공지를 해야 해요

00:57.950 --> 01:03.830
먼저 이미지 생성에 드는 비용은 아주 적지 않아요

01:03.880 --> 01:10.150
지금까지 한 모든 게 1센트 미만이라도 적게 들었으면 좋겠어요

01:10.300 --> 01:16.090
당신이 엄청나게 긴 책자를 만든 게 아니라면 지금까지 이 과정을 진행했다고 해서

01:16.090 --> 01:17.830
큰돈을 번 건 아니에요

01:17.950 --> 01:21.880
하지만 지금은 좀 더 눈에 띄는 일을 하고 있어요

01:21.910 --> 01:25.420
우리가 생성하는 이미지마다 0달러가 들어요 4시요

01:25.450 --> 01:31.360
이 사진들을 보시면 0달러의 가치가 있다는 걸 아실 거예요 Put 각각 04달러요

01:31.570 --> 01:34.720
아주 창의적이고 가치도 높아요

01:34.720 --> 01:35.590
정말 좋아요

01:35.590 --> 01:37.630
돈을 잘 쓴 것 같아요

01:37.630 --> 01:42.310
하지만 그걸 알려드리고 싶어요 0달러를 쓸지 말지 결정하시라고요 한 번에 04개요

01:42.700 --> 01:49.120
언급하고 싶은 다른 것은 약간 그러니까 이미지 생성이나 음향

01:49.120 --> 01:56.770
생성 같은 것을 말할 때 LM이라는 용어를 써야 할지에 대한 논점이 있어요

01:56.770 --> 01:58.270
비트

01:58.300 --> 01:59.290
문자로 오디오를 연결해요

01:59.320 --> 02:03.400
물론 이건 무대 뒤에 있는 대형 언어 모델이 아니니까요

02:03.430 --> 02:10.090
요즘 사람들은 LM을 일반 용어로 사용합니다 인공지능 시스템 뒤에 있는

02:10.090 --> 02:12.280
모델을 일컫는 비트죠

02:12.280 --> 02:19.450
실제로 LM 엔지니어가 갖춰야 할 기술과 도구라고 생각해요

02:19.450 --> 02:23.800
하지만 엄밀히 말하면 이건 언어 모델이 아니에요

02:23.800 --> 02:30.730
이것들은 이미지 모델과 오디오 모델입니다 에이전트 프레임워크에 추가할 때 실행할

02:30.730 --> 02:31.630
수 있죠

02:31.750 --> 02:34.720
어쨌든 서문은 됐고, 이제 시작하죠. Get it.

02:34.720 --> 02:39.220
유용한 이미지 라이브러리 가져오기로 시작하죠

02:39.220 --> 02:40.420
첫 번째는 아니에요

02:40.570 --> 02:44.260
처음 두 개는 이미지 라이브러리가 아니라 일부 유틸리티예요

02:44.260 --> 02:51.520
파이썬 이미지 라이브러리는 아주 유용합니다 아주 편리한 공통 라이브러리예요

02:51.760 --> 03:00.820
다음으로 할 일은 아티스트라는 함수를 작성하는 겁니다 아티스트는 OpenAI.Nagees.Nageate를

03:00.850 --> 03:03.520
호출하죠

03:03.520 --> 03:09.460
OpenAI 이미지 생성에 사용되는 스타일이 아주 일관적이죠

03:09.460 --> 03:11.520
모델 이름을 통과해요

03:11.520 --> 03:13.860
이 경우에는 모델이 달어리 쓰리예요

03:13.890 --> 03:16.650
그 전신인 달이 2호도 한번 드셔 보세요

03:16.680 --> 03:18.480
이미지는 less예요

03:18.480 --> 03:19.440
비트가 좀 더 저렴해요

03:19.440 --> 03:24.450
0달러 정도였던 것 같아요 0달러가 아니라 02달러요 0달러면 많이 싼 편은 아닌데 0달러나

03:24.450 --> 03:26.160
더 쓴 보람이 있네요 2번요

03:26.190 --> 03:27.750
달리 쓰리 주세요

03:27.780 --> 03:32.400
즉각적으로 알려주면 이건 현명한 사전 목록이 아니죠

03:32.400 --> 03:33.360
그냥 문자예요

03:33.360 --> 03:39.240
이 경우에는 제가 제안하는 건 도시에서의 휴가를 상징하는 이미지예요

03:39.240 --> 03:46.980
관광지와 도시의 모든 특징을 생동감 넘치는 팝아트 스타일로 표현하는 거죠

03:46.980 --> 03:50.250
가장 작은 크기로 정해요

03:50.250 --> 03:53.070
달이 3개면 충분하고 달이 2개면 훨씬 작아요

03:53.250 --> 03:58.680
돌레 3도 초상과 가로 형식으로 큰 사이즈를 두 개 만들 수 있어요

03:58.740 --> 04:00.870
크기가 궁금하면 구글에서 검색하세요

04:00.870 --> 04:02.400
이 이미지들을 시도해 보세요

04:02.430 --> 04:04.260
이미지만 있으면 돼요

04:04.260 --> 04:06.210
이 포맷을 원한다고 하죠

04:06.450 --> 04:12.840
백은 베이스64 암호 형식으로 되어 있어요

04:12.840 --> 04:20.040
바이트 단위로 디코딩하고 그 바이트 단위로 바이트 IO 객체를 생성합니다

04:20.040 --> 04:26.850
그리고 나서 이미지.오픈 함수로 이동합니다 이미지를 반환해 주죠

04:26.850 --> 04:28.320
실행해보죠

04:28.320 --> 04:30.300
이제 한번 해 보죠

04:30.330 --> 04:35.040
이미지 = 아티스트라고 하죠

04:36.870 --> 04:38.940
뭐라고 해야 할까요? 뉴욕시

04:42.660 --> 04:50.520
이미지를 디스플레이하는 건 그걸 보여주는 주피터 방식이죠

04:50.550 --> 04:53.400
실행해보죠, 아니면 이미 실행한 게 보이나요

04:53.400 --> 04:56.790
시간이 좀 걸리지만 정말 놀랍죠?

04:56.940 --> 04:58.380
이미 먹고 있잖아요

04:58.380 --> 05:00.750
바로 보여 드려서 버릇 나빠지게 해 드렸어요

05:00.750 --> 05:01.950
이렇게 생겼어요

05:01.950 --> 05:07.710
두 번째 이미지를 위에 만들 거예요 자유의 여신상과 엠파이어

05:07.710 --> 05:16.200
스테이트 빌딩 몇 개와 비행기들이 보이고 타임스 스퀘어 이미지와 많은 간판과 뉴욕 이미지가

05:16.200 --> 05:18.510
택시를 나타내죠

05:18.540 --> 05:19.140
보세요

05:19.170 --> 05:20.610
노란 뉴욕 택시요

05:20.640 --> 05:21.690
코카콜라도요

05:21.690 --> 05:23.040
핫도그도 있어요

05:23.070 --> 05:25.050
뉴욕의 상징이죠

05:25.080 --> 05:26.550
환상적이에요

05:26.580 --> 05:29.190
한편, 다른 이미지를 구축했어요

05:29.190 --> 05:29.670
그리고요

05:29.670 --> 05:31.020
이것 좀 봐요

05:31.020 --> 05:32.340
달라요

05:32.340 --> 05:33.120
좋아요

05:33.120 --> 05:35.430
여기에 큰 제트기가 있어요

05:35.430 --> 05:40.620
엠파이어 스테이트 빌딩도 있고 여러 채와 자유의 여신상도 있어요

05:40.620 --> 05:47.280
앞에는 번화한 상점들과 택시가 보이고 뉴욕의 상징적인 택시와 핫도그가

05:47.310 --> 05:48.870
다시 등장하죠

05:49.080 --> 05:54.330
이 사진들을 보면 정말 창의적이고 색다르다는 걸 알 수 있어요

05:54.330 --> 05:59.790
두 장이 있는데 조금 전에 찍은 사진과 여기 있는 사진을 보면 얼마나

05:59.790 --> 06:01.470
멋진지 알 수 있죠

06:02.430 --> 06:03.060
좋아요

06:03.060 --> 06:05.220
재미있게 보셨길 바라요

06:05.220 --> 06:10.920
0달러 정도 쓰는 게 어때요? 04, 이미지 몇 개 만들어 보세요

06:10.920 --> 06:12.180
멋져요

06:12.690 --> 06:14.940
함수를 하나 더 추가할게요

06:14.940 --> 06:20.450
OpenAI의 음성을 이용해 오디오를 생성하는 함수를 만들 거예요

06:20.450 --> 06:25.670
파이덥이라는 라이브러리를 가진 몇 가지 유틸리티들을 이용할 거예요

06:25.670 --> 06:26.630
아주 유용하죠

06:26.840 --> 06:29.300
토커라는 함수를 쓸 거예요

06:29.300 --> 06:33.860
토커는 OpenAI. audio.speaks.Crate라고 부를 거예요

06:33.860 --> 06:39.470
이미지 생성은 OpenAI 이미지가 생성된 것인데요

06:39.470 --> 06:46.760
오디오는 OpenAI audio.speaks.Create가 있네요

06:46.760 --> 06:48.500
모형을 통과시키죠

06:48.740 --> 06:56.300
이게 우리가 쓰는 모델이에요 TTS는 텍스트에서 음성으로 전환하는 모델이죠

06:56.330 --> 07:00.080
우리가 쓰는 모델은 목소리를 제공해요

07:00.080 --> 07:01.880
이번에는 목소리를 시험해 보죠

07:01.910 --> 07:02.750
오닉스요

07:02.750 --> 07:04.880
8개의 다른 목소리를 다시 녹음해야 했어요

07:04.910 --> 07:06.800
구글로 검색하면 다 나와요

07:06.800 --> 07:10.310
이 함수라고 불리는 것을 전달하죠

07:10.310 --> 07:16.520
결과를 보면 바이트당 IO 객체를 생성해 그 바이트를 나타내죠

07:16.520 --> 07:25.330
그리고 이걸 이 오디오 세그먼트에 사용합니다 파일과 오디오 스트림에서 생성해 해당 오디오를 재생하도록

07:25.330 --> 07:27.250
get 하죠

07:27.250 --> 07:31.180
함수를 만들고 토크커라고 하죠

07:33.070 --> 07:35.470
안녕하세요

07:40.150 --> 07:41.110
안녕하세요

07:42.430 --> 07:43.240
됐어요

07:43.270 --> 07:44.500
아주 간단해요

07:44.830 --> 07:47.410
다른 목소리는 어떤지 들어보죠

07:47.410 --> 07:50.320
합금 소리를 들어보죠

07:50.470 --> 07:52.270
합금을 넣죠 Put

07:55.000 --> 07:55.930
안녕하세요

07:56.860 --> 07:58.630
합금으로 만든 거예요

07:58.660 --> 08:01.180
그냥 오닉스라고 하죠

08:01.180 --> 08:03.070
하지만 둘 다 가능해요

08:03.070 --> 08:09.580
그리고 여기에 더 넣어서 실험해보고 마음에 드는 걸 고르세요. Put it up Put it up Put it up Put it up Put it up Put it up Put it up Put it up Put it it up Put it up Put it up Put it Put it

08:09.910 --> 08:10.810
좋아요

08:10.810 --> 08:13.510
그렇게 하죠

08:14.710 --> 08:20.920
이제 에이전트 프레임워크에 대해 얘기해보죠

08:20.950 --> 08:23.650
다음 영상은 잠시 쉬죠

08:23.650 --> 08:26.200
거기서 에이전트 프레임워크를 다룰 거예요

08:26.230 --> 08:27.280
그때 봐요
