WEBVTT

00:00.980 --> 00:04.040
둘째 주, 5일째예요

00:04.070 --> 00:09.050
2주 차 마지막 날입니다 많은 일이 벌어지고 있죠

00:09.050 --> 00:16.100
계속 함께해 줘서 정말 고마워요 보람을 느끼게 해 줄게요 오늘은

00:16.100 --> 00:18.620
정말 재미있을 거예요

00:18.620 --> 00:21.530
Get it가 기대되네요

00:21.890 --> 00:24.410
둘째 주의 대망의 결말이죠

00:24.740 --> 00:27.800
전 계속 여러분이 뭘 할 수 있는지 말할 거예요

00:27.800 --> 00:32.840
트랜스포머의 성공을 축하하는 건 정말 중요해요

00:32.840 --> 00:38.660
프론티어 API에 대항해 코드를 작성할 수 있고 인공지능 보조를 만들 수 있고 전문 지식을 줄 도구를

00:38.660 --> 00:39.800
추가할 수 있죠

00:39.830 --> 00:42.440
오늘은 에이전트를 소개하죠

00:42.440 --> 00:48.650
요원이 보다 진보된 순차적 작업을 수행하는 방법을 얘기했죠

00:48.650 --> 00:56.450
그리고 아주 재미있는 걸 할 거예요 에이전트와 도구를 이용해 다중 모듈 인공지능 보조를 만드는 거죠

00:57.620 --> 00:59.390
에이전트가 뭐죠?

00:59.720 --> 01:01.190
요원이라고 해야겠죠

01:01.220 --> 01:02.390
에이전트 I요

01:02.420 --> 01:02.900
에이전트요

01:03.530 --> 01:07.790
다양한 상황에서 사용할 수 있는 우산형 용어 중 하나죠

01:07.790 --> 01:12.140
사람마다 다른 의미를 가질 수 있는 거예요

01:12.140 --> 01:17.660
하지만 일반적으로 사람들은 자율적인 소프트웨어 엔터티라고 하죠

01:17.660 --> 01:25.640
입력 프롬프트와 텍스트 생성에서만이 아니라 다른 작업도 수행할 수 있죠

01:25.820 --> 01:27.530
전형적인 특징이죠

01:27.530 --> 01:28.700
자율적이라 치죠

01:28.700 --> 01:33.740
일종의 기관이 있고 목표 지향적이며 어떤 일을 하려고

01:33.740 --> 01:37.520
설정하고 작업에 구체적이죠

01:37.520 --> 01:42.620
보통 한 가지에 특화된 사람들이에요

01:43.010 --> 01:48.230
에이전트 프레임워크라는 것의 일부로 설계되었는데 인간의

01:48.230 --> 01:55.190
제한적인 개입으로 더 복잡한 문제를 해결하기 위해 에이전트가 상호 작용하는

01:55.190 --> 01:56.450
환경이죠

01:56.450 --> 02:00.020
인간에게 요청하는 요청 대응 상황이 아니에요

02:00.020 --> 02:06.150
하지만 이런 환경을 상상해 보세요 작업을 수행하기 위해 기존 소프트웨어와 상호

02:06.150 --> 02:12.690
작용하기 위해 다중 소프트웨어 에이전트가 llms의 조합이 될 수 있는 환경이요

02:12.690 --> 02:19.770
여러분이 기대할 수 있는 기능은 메모리와 지속성인데 요청 응답을

02:19.770 --> 02:26.820
넘어서 의사 결정과 오케스트레이션을 할 수 있고 무엇을 계획할

02:26.820 --> 02:30.750
수 있는지에 관한 거죠

02:30.930 --> 02:36.240
때로는 환경의 문제일 뿐입니다 그에 대한 어떤 계획으로 코드되어 있는 거죠

02:36.240 --> 02:40.410
계획을 책임지는 LLM이 있을 때도 있어요

02:40.410 --> 02:45.840
복잡한 문제를 작은 문제로 쪼개서 다른 모델이 해결하도록

02:45.840 --> 02:47.400
하는 모델이죠

02:47.880 --> 02:53.310
도구를 사용하는 건 유전적 인공지능의 예죠

02:53.310 --> 02:59.370
이제 익숙해지셨겠지만 모델에 데이터베이스나 인터넷 연결 등

02:59.370 --> 03:06.910
원하는 모든 것에 연결할 수 있는 기능을 제공합니다 기능에 액세스를 제공하고

03:06.910 --> 03:10.450
어떻게 작동하는지도 아니까요

03:10.450 --> 03:17.440
그냥 if문인 걸 알지만 이건 Lms가 이걸 할 수 있다는 효과를

03:17.440 --> 03:18.580
주죠

03:19.960 --> 03:22.540
몇 가지 할 게 있어요

03:22.540 --> 03:26.170
상황을 간단히 설명해 드리죠

03:26.200 --> 03:34.390
먼저 이미지를 생성할 수 있는 함수를 만들겠습니다 좋은 다중 모듈 사용 사례죠

03:34.390 --> 03:37.990
그걸 할 수 있는 LLM 호출을 할 거예요

03:37.990 --> 03:39.760
그걸 하는 함수가 되겠죠

03:39.760 --> 03:42.670
그 자체로 에이전트라고 볼 수 있어요

03:42.670 --> 03:49.540
아주 구체적이고 전문적인 지시를 그대로 실행하는 소프트웨어 같아요

03:49.540 --> 03:58.990
코드로 아티스트 작업을 할 거예요 오픈AI의 이미지 생성 모델인 달리

03:58.990 --> 04:02.240
3의 도움을 받아서요

04:02.480 --> 04:07.910
굳이 트집을 잡자면 이미지 생성은 LM과 무관하다고 주장할

04:07.910 --> 04:09.650
수도 있어요

04:09.680 --> 04:16.250
lm은 언어 모델이지만 요즘엔 일반적으로 더 넓은 세대 인공지능 컨텍스트와

04:16.250 --> 04:18.380
교환적으로 사용되죠

04:18.380 --> 04:24.590
이미지 생성이나 다른 다중 모듈 생성 역시 LM 엔지니어의 도구 키트에

04:24.590 --> 04:28.100
포함된다고 생각하는 경향이 있죠

04:29.120 --> 04:35.510
에이전트를 만드는 걸 살펴볼 겁니다 이런 작업을 할 수 있는 이런

04:35.510 --> 04:36.290
함수요

04:36.290 --> 04:43.700
이미지뿐 아니라 소리도 추가할 거예요 에이전트 프레임워크를 만들어

04:43.730 --> 04:50.000
인공지능 보조를 가르칠 거예요 우리가 말하고 그리는 법을 연구했던

04:50.030 --> 04:52.580
항공사 보조요

04:52.760 --> 04:55.820
그럼 바로 시작하죠 재미있을 것 같아요?

04:55.850 --> 04:59.060
흥미진진하게 들리면 좋겠네요 정말 멋질 테니까요

04:59.090 --> 05:00.320
빨리 하고 싶어요

05:00.320 --> 05:01.700
지금 당장 가죠
