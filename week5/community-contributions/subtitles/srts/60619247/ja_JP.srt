WEBVTT

00:00.110 --> 00:04.970
GPTにはもう少し時間をかけて､ もう少し面白いことを試してみたい｡ 

00:04.970 --> 00:09.470
GPTの以前のバージョンでよく聞かれた質問から始めたい｡ 

00:09.500 --> 00:15.170
GPTの限界を示すためのGPT2だったと思うが､ それでも問題があるかどうかはこれからだ｡ 

00:15.170 --> 00:18.830
有名な質問は「虹は何本？

00:20.840 --> 00:21.530
面白そうだろう？

00:21.530 --> 00:29.960
ハワイから17番まで跳ぶのに何本の虹がかかる？

00:30.110 --> 00:31.610
興味深い質問だ｡ 

00:31.610 --> 00:41.360
そしてGPTの2人だったと思うが､ ハワイから17番まで跳ぶには3本の虹が必要だと強く答えた｡

00:41.660 --> 00:45.200
でも､ GPT4にはそのような問題はない｡ 

00:45.200 --> 00:45.590
今にわかるよ｡ 

00:45.590 --> 00:53.150
ウィットに富んだ楽しい返事を返し､ その返事にはレインボーの絵文字まで含まれている｡ 

00:53.390 --> 00:54.710
驚くべきことだ｡ 

00:55.070 --> 01:04.520
GPTの4つのOはOmni（オムニ）の略で､ マルチモーダルであることを表している｡

01:04.520 --> 01:09.560
もちろん､ これをイメージしてくださいと言うこともできる｡ 

01:11.420 --> 01:22.970
ほんの数年前までは､ 想像力や創造性を発揮できるような法学修士号を取得することは可能だろうかと議論されていたのに､

01:22.970 --> 01:29.090
今では､ ハワイの驚くべき写真､ 17という数字､ そしてそこに至る虹の跳躍など､

01:29.090 --> 01:38.360
このようなものが生み出されることはほぼ当然の結論になっている｡

01:38.390 --> 01:41.750
つまり､ 正直なところ､ 本当に素晴らしいんだ｡ 

01:41.780 --> 01:43.190
本当に素晴らしい｡ 

01:43.400 --> 01:47.390
それで､ 自分で説明までしてくれるんだ｡ 

01:47.390 --> 01:52.100
ええ､ このような創造的な挑戦にはとても効果的です｡ 

01:52.490 --> 01:57.920
さて､ 話は変わるが､ キャンバスでGPT4を試してみよう｡ 

01:58.100 --> 02:00.920
GPTのもうひとつの新機能｡ 

02:01.400 --> 02:07.100
そして､ OpenAIと非常に協力的に仕事をすることができる｡ 

02:07.190 --> 02:13.080
ええと､ 少し前に質問したパイソンの質問に戻りましょう｡ 

02:13.080 --> 02:23.820
例えば､ キャンバスを使って､ このコードで私と仕事をしてください｡ 

02:25.410 --> 02:25.680
ええと｡ 

02:25.680 --> 02:26.160
見てみよう｡ 

02:26.190 --> 02:26.760
収量｡ 

02:26.760 --> 02:30.570
これからは､ そうじゃないかもしれないことをする｡ 

02:30.600 --> 02:31.920
少し変えてみるよ｡ 

02:31.950 --> 02:42.780
本の中の本の著者を得る｡ 

02:42.780 --> 02:46.410
そして､ 私は本が何であるか､ これが何を意味するかは教えていない｡ 

02:46.410 --> 02:50.070
私はただ､ このコード行を与えて､ それがどうなるかを見ているだけだ｡ 

02:50.070 --> 02:51.870
では､ これからどうなるか見てみよう｡ 

02:51.870 --> 03:00.210
まず最初に､ 右側にあるキャンバスを開き､ このコードを反復することができる｡

03:00.480 --> 03:01.740
ああ､ わかった｡ 

03:01.770 --> 03:02.910
そして､ それはそこにある｡ 

03:03.060 --> 03:05.730
ええと､ コードが表示されています｡ 

03:05.760 --> 03:17.420
カーソルのようなものが表示され､ 書き換えたり､

03:17.420 --> 03:24.560
装飾したりする｡

03:24.560 --> 03:27.920
そして今､ そのコードの一部がジェネレーターに変わった｡ 

03:27.920 --> 03:30.140
例を示すデータもある｡ 

03:30.140 --> 03:37.370
そして､ タイトルと著者のある本があることは理解されているし､ その小さなテスト例のようなものもある｡

03:37.370 --> 03:41.120
だから､ あなたがそれを見抜き､ 書き直した方法は効果的だった｡ 

03:41.120 --> 03:58.430
それでは､ ジェネレーターが作者のいない本や空白の本を除外するように､ このコードを修正してください｡

04:00.410 --> 04:04.220
そして､ これはビジネス上の要求のようなものだと想像できるだろう｡ 

04:04.340 --> 04:10.310
そして､ そこに表示されるのは､ 私がそこに持っていたコードと本当によく似たものだ｡ 

04:10.310 --> 04:17.810
そして､ 空の本と欠けている本の例をいくつか挙げ､ この行を書き直した｡

04:17.810 --> 04:24.220
これまでやってきたことをインタラクティブに追加できるのがとてもいい｡ 

04:24.250 --> 04:36.220
それでは､ ユニークな著者だけが得られるように更新してください｡ 

04:36.250 --> 04:38.380
ちょっと言い方がゆるいかな｡ 

04:38.380 --> 04:42.100
何を更新してほしいかまでは言っていない｡ 

04:42.100 --> 04:47.470
そして今､ それは通過し､ それは通過した仕事をやり遂げた｡ 

04:47.500 --> 04:53.770
同じ作者による別の例が追加され､ このコードが更新され､ 見たものを追跡するためにセットを使用し､

04:53.800 --> 04:59.350
ユニークなケースだけが得られるようになった｡

04:59.380 --> 05:03.490
実際､ これは私が持っていた1本のライナーよりも良い解決策だと思う｡ 

05:03.490 --> 05:05.020
しかし､ もっと長い｡ 

05:05.140 --> 05:10.720
でも､ その方がいい理由はいろいろあるんだろうけど､ それでも取れないかどうかやってみよう｡

05:10.720 --> 05:22.360
これをもっと簡単に書き直すと､ 『イールド』の著者ジェネレーターを書き直すことは可能か？

05:22.780 --> 05:24.310
簡単に言おう｡ 

05:25.030 --> 05:31.050
それを単純化するために､ 一発やらせてみよう｡ 

05:31.140 --> 05:32.100
スルーだ｡ 

05:32.100 --> 05:34.200
それは変わらない｡ 

05:34.200 --> 05:36.330
そして､ これだ｡ 

05:38.220 --> 05:47.310
そしてそれは､ 前のスライドでお見せしたコードよりも､ また少し良くなっています｡

05:47.310 --> 05:50.310
中括弧を使って集合を表す｡ 

05:50.400 --> 05:56.190
そのセリフから "yield "と言うこともできたが､ この方法を選んだ｡

05:56.190 --> 06:03.270
このような形でGPTと仕事をする経験全体､ そしてインタラクティブなやり方､ 例題データの構築のようなことをやってくれるやり方､

06:03.270 --> 06:10.110
そして更新して何が起こるかを見せてくれるやり方に､ 私は驚いている｡

06:10.110 --> 06:16.350
もしキャンバスが表示されなかったら､

06:16.350 --> 06:30.960
キャンバスを使うという言葉を使えば表示される｡
