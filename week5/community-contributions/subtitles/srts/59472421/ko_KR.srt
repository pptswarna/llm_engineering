WEBVTT

00:00.110 --> 00:05.510
주피터 연구소에서 마지막 시간을 보내게 됐습니다 전통적인 머신 러닝이죠

00:05.510 --> 00:07.100
거의 다 끝났어요

00:07.130 --> 00:09.170
개인적으로는 정말 재미있어요

00:09.260 --> 00:12.290
너무 견디기 힘들진 않았길 바라요

00:12.320 --> 00:17.600
그래도 멋진 경험이었어요 스스로 실험해 보셨길 바라요 기능을

00:17.600 --> 00:23.660
추가하고 실험하면서 더 많은 걸 얻을 수 있는지 보세요 get it

00:23.660 --> 00:29.150
이게 마지막으로 본 도표인데 단어 2개가 평균 115 오류로 나왔어요

00:29.180 --> 00:35.390
기억하실지 모르겠지만 원래 Wards NLP 모델에선 더 잘했죠 114 113까지

00:35.390 --> 00:39.320
가능했던 것 같아요 6살쯤요

00:39.680 --> 00:46.010
이제 마지막 모델 두 개를 공개할 거예요

00:46.040 --> 00:54.980
벡터 머신의 벡터 회귀를 지원할 겁니다 전통적인 머신 러닝

00:55.010 --> 00:56.630
기술이죠

00:56.630 --> 01:03.070
데이터 포인트를 가지고 초고층 행성에 맞춰 데이터를 분리할 때 서포트

01:03.100 --> 01:08.560
벡터라는 것을 이용합니다 초고층 행성에 가장 가까운 지점의

01:08.590 --> 01:09.730
벡터죠

01:09.820 --> 01:14.530
여러분에겐 말도 안 되는 얘기일 수도 있고 이미 아는 걸 제가 잘 설명하지 못하는 걸 수도

01:14.530 --> 01:15.100
있죠

01:15.100 --> 01:16.840
어느 쪽이든 상관없어요

01:16.840 --> 01:22.630
라이브러리를 스키킷 배우기에서 그대로 가져올 거예요 사용하기 아주 쉽죠

01:22.750 --> 01:24.970
선형 SVR을 사용해요

01:25.000 --> 01:31.000
더 나은 결과를 내는 다른 종류의 알갱이들도 있지만 실행하는 데 오래 걸리죠

01:31.000 --> 01:36.700
이건 너무 빨리 돌아가요 너무 빠르죠 그래서 제가 제대로 사용하지 않는다는 생각이

01:36.730 --> 01:37.630
들어요

01:37.720 --> 01:44.380
이미 실행해봤고 5초 정도 걸렸지만 다른 커널로 사용한 건 밤새

01:44.380 --> 01:47.890
실행했는데도 아직 안 끝났어요

01:47.890 --> 01:53.920
그 중간쯤인 것 같아요 한번 살펴봐 주세요

01:54.070 --> 01:58.480
하지만 이게 제가 할 수 있는 최선이었어요

01:58.510 --> 02:02.610
어떻게 작동하는지 보죠

02:02.640 --> 02:03.240
준비됐어요?

02:03.270 --> 02:04.080
Put it! Put it! 베팅하세요

02:04.080 --> 02:05.700
이제 실행할게요

02:05.970 --> 02:06.990
안 그럴게요

02:07.290 --> 02:09.510
저기 있네요

02:09.600 --> 02:10.470
좋아요

02:10.890 --> 02:12.360
네

02:12.360 --> 02:17.190
노랑, 빨강, 초록이 많이 들어갔어요

02:17.190 --> 02:22.740
확실히 으깨지진 않지만 심각해 보이지는 않네요

02:22.740 --> 02:25.860
Get-Tuck Season 1 닙턱 시즌 1 차트에서는 어떨지 보죠

02:26.940 --> 02:33.210
지금까지는 아주 좋아요

02:33.240 --> 02:35.220
112살요 5분

02:35.250 --> 02:43.680
이전 우승자보다 머리카락이 더 낫네요 그 사람은 단어 한 자루로 선형 회귀 모델이었어요

02:43.710 --> 02:49.980
겉으로 보기에는 좋은 점이 많지만 평균보다 훨씬 높은 점수를

02:50.070 --> 02:52.740
추정하기는 어렵네요

02:52.860 --> 02:58.950
진전이 있긴 하지만 대단한 진전은 없어요

02:59.400 --> 03:03.590
지원 벡터 회귀 모델이에요

03:03.770 --> 03:11.990
이제 마지막 모델로 넘어가죠 임의 숲 임의 숲 퇴행 임의 숲이에요

03:12.020 --> 03:13.610
특별한 기술이죠

03:13.610 --> 03:19.040
작은 모델들을 조합하는 일종의 앙상블 기술이에요

03:19.250 --> 03:27.050
그게 결합하는 모델은 각각 데이터 포인트와 기능의 무작위 샘플을 취합니다

03:27.050 --> 03:32.270
우리 경우엔 벡터의 다른 덩어리를 의미하죠

03:32.390 --> 03:38.900
그걸 바탕으로 훈련하고 그 모델들을 전부 합쳤어요

03:38.900 --> 03:45.350
회귀의 경우 이 미니 모델들의 평균을 취합니다 그걸 임의 숲이라고

03:45.350 --> 03:47.000
하죠

03:47.090 --> 03:49.610
어떻게 되는지 보죠

03:49.610 --> 03:55.700
데이터셋의 형태와 크기에 상관없이 잘 작동한다고 알려져 있죠

03:55.730 --> 03:59.540
하이퍼 매개 변수가 많지 않다는 점에서 좋아요

03:59.570 --> 04:04.520
하이퍼 매개변수는 추가적인 것을 수정하기 위한 추가적인 노브라고 부르죠

04:04.520 --> 04:06.800
다양한 가치를 시도해 봐야 해요

04:07.100 --> 04:09.230
아무 숲이나 있는 건 아니죠

04:09.230 --> 04:11.480
있는 그대로 사용하고 어떻게 되는지 보는 거죠

04:11.480 --> 04:15.560
있는 그대로 사용했으니 어떻게 되는지 보죠

04:15.590 --> 04:19.970
테스터 닷 테스트 무작위 처리기로 통과했어요

04:19.970 --> 04:21.680
다시 한 번 베팅을 걸어요 Put

04:21.980 --> 04:25.880
무작위 숲이 더 잘할까요? 아니면 더 못할까요?

04:25.910 --> 04:28.010
112가 넘어야 할 숫자죠

04:28.010 --> 04:30.740
전통적인 머신 러닝은 어떤지 보죠

04:30.740 --> 04:31.790
녹색도 좀 보이고요

04:31.790 --> 04:34.130
붉은색도 있고 녹색도 있어요

04:34.370 --> 04:36.830
뛰는 건 비트보다 좀 느려요

04:36.860 --> 04:42.020
녹색과 붉은색이 아주 많이 보여요

04:42.320 --> 04:45.230
하지만 일반적으로 그런 게 있어요

04:45.230 --> 04:46.820
다 됐어요

04:46.820 --> 04:50.060
무작위 숲이 이겼어요

04:50.090 --> 04:52.940
오류는 97달러예요

04:52.940 --> 04:54.920
10만 달러도 안 돼요

04:54.950 --> 04:56.780
손잡이가 9개예요

04:56.780 --> 04:58.610
100달러도 안 돼요

04:58.640 --> 04:59.930
지금까지는 최고였죠

04:59.930 --> 05:02.370
34%가 초록색이에요

05:02.550 --> 05:03.840
우리 대사예요

05:03.840 --> 05:05.130
여기 초록색 점들이 있고요

05:05.130 --> 05:09.450
비트를 예상하는 데 문제가 좀 있었지만 그렇게 나쁘진 않았어요

05:09.720 --> 05:11.310
저 사람 때문에 얼마나 잘 됐는지 보세요

05:11.340 --> 05:14.220
정말 비싼 제품인데 녹색이네요

05:14.340 --> 05:23.340
그리고 대체로 잘 진행되고 있어요 확실히 우승 후보라고 할 수 있죠

05:23.340 --> 05:25.410
축하해요, 랜덤 포레스트

05:25.500 --> 05:27.450
물론 축하할 일이죠

05:27.450 --> 05:34.710
이걸 극복했다면 난수 포레스트 같은 걸 쓸 수 있어요 방금 나온 벡터만 넣는

05:34.710 --> 05:38.160
게 아니라 기능을 추가할 수도 있죠

05:38.160 --> 05:45.540
어떤 기능을 만들어 끼워 넣을 수도 있죠 그걸 이용해서 이 기록을 깰 수도 있고요 97보다

05:45.540 --> 05:49.110
더 잘 만들 수도 있죠 get it

05:49.230 --> 05:55.530
전통적인 머신 러닝을 어떻게 즐기는지 보죠 LMS를

05:55.530 --> 05:59.640
시험하기 전에 이게 끝이니까요

05:59.640 --> 06:02.730
그 전에 슬라이드로 간단히 마무리하죠
