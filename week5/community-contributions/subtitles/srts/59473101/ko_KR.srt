WEBVTT

00:01.400 --> 00:02.420
잘 돌아왔어요

00:02.420 --> 00:06.980
10분에서 15분 정도 지나자 마라톤이 끝났어요

00:06.980 --> 00:08.090
어떻게 아냐고요?

00:08.120 --> 00:08.900
몇 가지 있죠

00:08.900 --> 00:15.020
오픈AI에서 이메일이 왔습니다 여기 보이듯이 제 튜닝에

00:15.050 --> 00:16.910
대해 알려 주네요

00:16.940 --> 00:22.490
어쩌고저쩌고가 성공적으로 완료됐고 새 모델, 어쩌고저쩌고가 생성됐어요

00:22.490 --> 00:28.040
모델의 이름에서 워드 프로세서가 보이시죠. 프로세서에 접미사를 포함하도록

00:28.040 --> 00:30.680
특별히 요청했거든요.

00:30.740 --> 00:32.840
어떻게 작동하는지 보여드릴게요

00:32.840 --> 00:38.390
미세한 조정의 위업 이름이죠 GPT 4 미니 버전의 이름이에요

00:38.390 --> 00:43.850
퍼스널 콜론 프로세서로 작업해 왔죠 그리고 마지막 코드예요

00:43.850 --> 00:45.740
이게 제 이메일 주소예요

00:45.770 --> 00:48.110
여기가 유피터랩이에요

00:48.110 --> 00:50.090
우리가 진행하던 거였어요

00:50.180 --> 00:58.370
현재 상태에 있는 마지막 메시지 10개를 보고 있는데요 단계가 완료된 걸 보실

00:58.370 --> 00:59.240
수 있죠

00:59.390 --> 01:01.940
마지막 다섯 계단이에요

01:01.940 --> 01:04.110
파인 튠 모델이 완성됐어요

01:04.140 --> 01:08.070
사용하기 전에 사용 정책에 대항해 모델을 평가하는 거죠

01:08.070 --> 01:11.040
제가 말씀드린 게 그거였어요

01:11.250 --> 01:17.340
그러면 사용 방침이 완성되고 작업이 성공적으로 완료되죠

01:17.340 --> 01:24.960
이제 무게와 편향으로 어떻게 보이는지 보여드릴게요

01:24.960 --> 01:27.690
이게 최종 무게와 편향도 도표예요

01:27.840 --> 01:33.870
여기서 정말 중요한 건 훈련과 검증 손실입니다 검증 손실은

01:33.870 --> 01:38.880
정기적으로 계산된 훈련 손실만큼 발생하거나 일어나지

01:38.880 --> 01:40.470
않아요

01:40.710 --> 01:46.530
다시 말씀드리지만 저희는 한 시대를 개혁하면서 모든 훈련 데이터가 새로워졌어요

01:46.530 --> 01:52.410
훈련의 손실은 검증의 손실만큼이나 유용해요 항상 한 세트에서

01:52.410 --> 01:54.000
계산을 하니까요

01:54.030 --> 01:57.960
유행을 파악하는 데 특히 유용하죠

01:58.080 --> 02:02.670
언뜻 보면 검증 손실을 보면 별다른 추세가 없는 것 같아요

02:02.700 --> 02:04.500
그래서 걱정이죠

02:04.500 --> 02:05.520
이 얘기를 꺼내죠

02:05.520 --> 02:08.510
이 패널을 편집하고 확대할 수 있어요

02:08.510 --> 02:10.940
여기서 y축을 바꿔도 되고요

02:10.970 --> 02:12.920
최소 0달러는 받아야죠

02:12.920 --> 02:15.590
최대한 3개로 하죠

02:15.590 --> 02:17.600
줌 인을 하죠

02:18.620 --> 02:23.240
보시다시피 나아지는 것 같지 않아요

02:23.240 --> 02:32.000
사실, 이렇게 말할 수도 있어요. 조금씩 증가하고 있다고요.

02:32.120 --> 02:39.080
하지만 스무딩 함수가 이 차트에 있는지

02:39.080 --> 02:46.910
잘 모르겠네요 스무딩 함수 말이에요

02:47.450 --> 02:54.080
네, 확실히 올라가진 않지만 뭔가 개선된 것 같아요 그리고

02:54.080 --> 02:57.080
평평하게 유지됐죠

02:57.080 --> 03:00.620
하지만 300점 이전에는 개선이 있었던 것 같아요

03:01.100 --> 03:07.150
이런 것들을 보면서 시간을 더 들여 보세요

03:07.150 --> 03:12.950
하지만 이제 테스트 데이터를 대상으로 이 모델을 평가할 때예요

03:13.340 --> 03:18.260
이걸 차고 있다가 다 되면 비디오로 돌릴게요

03:18.380 --> 03:20.960
그럼 주피터 연구소로 돌아가죠

03:20.960 --> 03:24.020
이게 저희가 만든 미세 튜닝 모델이에요

03:24.260 --> 03:29.060
get ID를 얻어서 미세 튜닝 모델을 수집할 수 있어요

03:29.060 --> 03:30.830
어떻게 되는지 간단히 보여드릴게요

03:30.860 --> 03:41.450
이걸 보여드리면 여길 보시면 바로 여기에 새 특성 미세 조정 모델이 있는 걸 보실 수 있습니다 이메일에

03:41.450 --> 03:47.810
있던 미세 조정 모델의 동일한 이름도 포함하고 있죠

03:47.810 --> 03:52.430
이메일에서 복사, 붙여넣기를 할 수 있지만 코드를 이용해서 빼내는

03:52.430 --> 03:53.180
게 낫겠죠

03:53.180 --> 03:54.380
여기 있네요

03:54.980 --> 04:03.020
제가 제안할 때 완료됐다는 걸 보여드리기 위해 이걸 실행하면 같은 이름을

04:03.020 --> 04:04.310
갖게 되죠

04:05.540 --> 04:07.100
좋아요

04:07.100 --> 04:13.470
함수에 대한 메시지를 다시 할게요

04:13.530 --> 04:20.400
이번에는 어, 답이 없는 것만 사용할게요

04:20.430 --> 04:24.270
물론 그 정보를 주고 싶진 않아요

04:24.540 --> 04:29.010
그게 통할 거라고 스스로를 설득해 보죠

04:29.400 --> 04:30.960
여기요

04:30.990 --> 04:35.280
그래서 질문이 생기죠

04:35.280 --> 04:37.260
가격은 안 나와요

04:37.260 --> 04:41.190
모델에게 주어진 과제는 이 부분을 완성하는 거예요

04:41.820 --> 04:47.340
기억하실 거예요 지난번에 나온 유틸리티 함수요 돌아오는 것에서 가격을

04:47.340 --> 04:48.840
추려내는 거죠

04:49.260 --> 04:54.960
지난번에 이걸 했을 때 대략 99달러였어요 99는 어쩌고저쩌고죠

04:54.990 --> 04:59.610
실행하면 get 가격 함수에서 가격을 벗기는 거죠

04:59.820 --> 05:01.920
이미 알고 계시겠지만요

05:02.370 --> 05:10.020
이게 함수입니다 우리가 시험할 함수죠

05:10.020 --> 05:18.270
GPT의 미세한 반응은 오픈AI 챗GPT 완성입니다 일반 GPT 4를 그렇게

05:18.270 --> 05:20.010
부르는데요

05:20.040 --> 05:21.570
같은 API네요

05:21.600 --> 05:22.470
맞아요

05:22.470 --> 05:27.000
아주 미세한 차이죠

05:27.030 --> 05:30.330
GPT 4 미니에서는 통과 못 하는 부분이죠

05:30.360 --> 05:38.850
미세 튜닝 모델의 이름을 전달합니다 바로 이 이름이죠 오픈AI에 보낼 거예요

05:38.850 --> 05:44.160
자동으로 알 거예요 잘 조율된 버전을 사용하고 싶다는 의미라는 것을요

05:44.670 --> 05:47.430
Get it, get it, get it, get it, get it, it, it! 응답을 취소하면 대가를 받는 거죠

05:49.080 --> 05:51.510
예제 하나를 프린트하죠

05:51.510 --> 05:58.080
테스트 세트를 프린트해 보죠 테스트 세트에 처음 나온 건데 200달러나

05:58.080 --> 06:01.380
주고 샀고 제가 예상치 못한 거였어요

06:01.380 --> 06:04.620
그리고 GPT를 처음으로 파인 튜닝할 거예요

06:04.620 --> 06:06.480
어떤 결과가 나왔는지 보죠

06:07.410 --> 06:12.780
네, 그게 죄송합니다 아까 보려던 액수는 훈련 비용이었어요

06:12.780 --> 06:15.120
첫 번째 테스트 제품 가격이에요

06:15.280 --> 06:18.010
첫 번째 테스트 아이템이 뭔지 보죠

06:19.120 --> 06:19.330
그래서요?

06:24.880 --> 06:26.620
한번 보죠

06:26.710 --> 06:32.290
에어컨 압축기 수리 키트예요 포드 차체 부품용이죠

06:32.290 --> 06:38.440
이건 제가 직접 해야 했던 작업인데 첫 번째 데이터 포인트를 제대로 처리하지 못했지만

06:38.440 --> 06:42.130
데이터 포인트 하나쯤이야 무슨 상관이죠?

06:42.130 --> 06:47.560
중요한 건 공장 전체에 걸쳐 하는 겁니다 적어도 모든 테스트에 일관적으로 사용했던 250g을

06:47.560 --> 06:48.490
통해서요

06:48.490 --> 06:53.410
그럼 지체 없이 실행해 보죠

06:53.410 --> 06:58.540
처음 몇 결과는 약간 빨간색이었다가 좀 더 좋아 보였다가 초록색으로 변했다가 다시 온통

06:58.540 --> 07:00.160
빨간색이었죠. 비트

07:00.160 --> 07:04.630
결과가 엇갈리네요

07:05.440 --> 07:11.470
250년 동안 매달리게 할 순 없어요

07:11.470 --> 07:13.150
잠시 멈출게요

07:13.150 --> 07:16.510
다음 영상에서는 결과를 알려드리죠

07:16.510 --> 07:17.770
거기서 봐요
