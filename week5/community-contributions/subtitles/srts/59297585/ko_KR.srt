WEBVTT

00:00.440 --> 00:07.280
다음으로 넘어가기 전에 이 멋진 슬라이드를 한 번 더 보여드리죠 간단한 3개의 추상화를

00:07.310 --> 00:13.130
묘사하고 추상화 랙 파이프라인을 구축하기 위한 하나의 메서드 호출이죠

00:13.160 --> 00:16.190
LM을 생성하고 메모리를 생성하죠

00:16.220 --> 00:20.690
당신은 당신의 레트리버를 생성합니다. 크로마 벡터 스토어나 .이 레트리버로 작동하는

00:20.690 --> 00:22.520
어떤 벡터 스토어도 호출해서요.

00:22.520 --> 00:28.190
그런 다음 이 선 하나로 대화 회수 체인을 만들 수 있어요 LM, 레트리버

00:28.190 --> 00:30.770
메모리로요 그럼 끝이죠

00:30.770 --> 00:36.080
물론 이 대화 사슬을 통해 invoke를 호출하고

00:36.080 --> 00:43.400
질문과 함께 사전을 전달하면 응답 키를 찾아 호출할 수 있고 모델에서

00:43.400 --> 00:46.010
응답을 받을 수 있죠

00:46.340 --> 00:51.770
그런 점에서 실력이 한 단계 향상됐어요

00:51.770 --> 00:53.540
기운이 넘치네요

00:53.540 --> 00:59.030
이제 랙 파이프라인 만드는 기술을 완성했어요

00:59.030 --> 01:00.380
축하해요

01:00.740 --> 01:06.170
자신만의 헝겊 지식 인력을 만들 수 있습니다 엔디어 엘름 같은 허구의 회사뿐

01:06.170 --> 01:11.060
아니라 진짜 회사에도 만들 수 있습니다 램프 체인을 사용해서요

01:11.060 --> 01:12.200
채도를 사용해도 돼요

01:12.230 --> 01:19.370
다른 벡터 데이터 저장소를 위해 바꾸는 것도 얼마나 쉬운지 알 수 있습니다 OpenAI가 아닌

01:19.370 --> 01:23.480
모델을 이용해 랭 체인이 아주 간단하게 만들었죠

01:23.570 --> 01:29.810
다음에 랑의 사슬 선언 언어를 간단히 다룰 거예요 우리가 사용할 건 아니지만

01:29.810 --> 01:31.100
보여드리죠

01:31.130 --> 01:32.900
원한다면 쓸 수 있어요

01:33.200 --> 01:38.390
랑 체인의 비트를 어떻게 활용하는지 알려드릴게요 여러분이 더 잘 이해하실 수 있게요

01:38.390 --> 01:44.750
특히 래그의 공통된 문제를 살펴보고 진단한 후 해결 방법을 얘기해

01:44.750 --> 01:45.770
보죠

01:45.770 --> 01:53.300
제작 프로젝트에서 랙을 사용할 수 있는 장비는 이 정도입니다 내부 작동 방식을 제대로 이해하게

01:53.300 --> 01:54.950
될 거예요

01:55.040 --> 01:57.200
그럼 다음 시간에 뵙죠
