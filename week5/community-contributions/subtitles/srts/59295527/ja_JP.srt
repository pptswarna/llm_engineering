WEBVTT

00:00.650 --> 00:08.030
LLMエンジニアリングとマスタリーへの旅の4週目､ 4日目へようこそ｡ 

00:08.180 --> 00:12.620
ここで再びコード・ジェネレーションを見てみよう｡ 

00:12.620 --> 00:19.190
前回は､ フロンティアモデルを使ってコードを生成するのがとても楽しかった｡ 結局､ 非常にシャープなUIを使って､

00:19.190 --> 00:31.040
さまざまな種類のパズルを試すことができたし､ クロードがコンペティションで優勝するために生成した驚くべきパフォーマンス向上も見ることができた｡

00:31.040 --> 00:39.380
問題を再解釈してシャノンのアルゴリズムを適用したところ､ 6万倍以上速くなったとは？

00:39.770 --> 00:42.740
だから今日はオープンソースに移行する｡ 

00:42.740 --> 00:45.860
コーディングにオープンソースのモデルを使えるようになる｡ 

00:45.860 --> 00:50.690
これはハギング・フェイスのもうひとつの機能で､ 推論を目的としてモデルをクラウドにプライベートでデプロイし､

00:50.690 --> 00:56.900
実行することができる｡

00:57.170 --> 01:02.960
つまり､ ハグフェイスという素晴らしいリソースのもうひとつの大きな特徴なのだ｡ 

01:03.230 --> 01:10.490
そして､ オープンソースLMSとフロンティアLMSを使ってコードを生成するソリューションを構築するつもりだ｡ 

01:10.520 --> 01:11.720
見てみよう｡ 

01:12.800 --> 01:15.260
まず､ この挑戦について簡単に思い出してほしい｡ 

01:15.290 --> 01:16.250
覚えているだろう？

01:16.280 --> 01:23.330
私たちは､ Cプラス､ プラス､ またはパイソンのコードを高性能のCプラスプラスコードに変換できる製品を作っています｡

01:23.600 --> 01:32.450
そしてGPTを4つ使い､ 前回はクロードが100倍速く走った｡ 

01:32.750 --> 01:40.490
GPT4は､ 少なくともコードを最適化した｡

01:40.490 --> 01:45.110
クロードは6万回以上もアルゴリズムを書き直したんだ｡ 

01:45.110 --> 01:46.550
パフォーマンス向上｡ 

01:46.550 --> 01:48.350
ファンタスティックだ｡ 

01:48.380 --> 01:55.640
今こそ､ オープンソースがフロンティアモデルという野獣にどう対抗できるかを見極める時が来たのだ｡ 

01:55.670 --> 01:57.050
試してみよう｡ 

01:57.080 --> 01:58.820
またすぐに会おう｡ 
