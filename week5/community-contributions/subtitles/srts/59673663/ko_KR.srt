WEBVTT

00:00.890 --> 00:03.080
잠깐만요, 더 있어요

00:03.110 --> 00:07.670
사용자 인터페이스에 추가해야 더 멋져 보일 거예요

00:07.760 --> 00:13.370
비트 박스에 좀 더 공을 들였어요 코드를 그렇게 상세히 검토할 필요는 없어요

00:13.370 --> 00:17.660
제가 생각해낸 걸 보여드리기 위한 것 외에는요

00:17.660 --> 00:24.650
하지만 로그 메시지가 나타나 상황을 볼 수 있는 게 만족스럽긴 하지만 사용자 인터페이스에

00:24.650 --> 00:28.550
표면을 만들면 훨씬 더 좋을 것 같아요

00:28.580 --> 00:34.070
좀 더 어렵죠 일반적으로 그래디오의 사용자 인터페이스는 요청을 하고

00:34.070 --> 00:38.330
응답을 받는 문제지만 완벽하게 비트가 가능해요

00:38.450 --> 00:45.350
제가 접근한 방식을 살펴볼 필요는 없지만 이제 새로운 파일로

00:45.350 --> 00:50.750
넘어가죠 가격이라는 새 모듈이에요

00:50.750 --> 00:51.080
네

00:51.080 --> 00:54.590
마지막 도트파이 가격 맞히기 직전이군요

00:54.590 --> 01:02.420
위에 몇 가지를 추가했어요 긴 로그 메시지를 구독할 수 있도록요

01:02.660 --> 01:06.540
그리고 비트를 좀 더 추가했어요

01:06.780 --> 01:13.590
그걸 염두에 두고 새 터미널 창을 만들어 사용자 인터페이스를

01:13.590 --> 01:14.340
보죠

01:14.700 --> 01:19.650
파이썬 가격이라고 할 수 있죠

01:19.680 --> 01:22.050
콘다 환경을 활성화해야 해요

01:22.080 --> 01:26.760
콘다가 LMS를 활성화한 게 분명해요

01:26.850 --> 01:36.360
파이썬 을 사용하면 최종 가격이라고 할 수 있죠 네

01:36.660 --> 01:38.820
뭐가 나오는지 보죠

01:38.880 --> 01:42.360
그래서 한동안 생각을 해요

01:42.390 --> 01:43.680
올라와요

01:43.680 --> 01:46.830
여기 1, 2개의 변화가 보이시죠

01:46.890 --> 01:56.070
먼저, 말씀드렸듯이 여기 아주 매력적인 로그가 있는데요, 진행 상황을 보여주고,

01:56.070 --> 02:03.270
서로 다른 에이전트들이 운영되는 동안 누가 무엇을 하는지 볼 수

02:03.270 --> 02:04.920
있죠

02:05.040 --> 02:08.730
아까처럼 테이블은 여기 위에 있어요

02:08.730 --> 02:12.830
클릭을 했더니 제 곁눈질로 푸시 알림이 바로 뜨는

02:12.830 --> 02:13.940
걸 봤어요

02:14.120 --> 02:16.070
이건 또 뭐죠?

02:16.100 --> 02:22.580
이건 크로마 데이터베이스의 3D 모형입니다 프론티어

02:22.580 --> 02:27.170
모델에 보낼 제품을 찾는 데 사용되죠

02:27.380 --> 02:29.210
무슨 생각 하시는지 알아요

02:29.270 --> 02:36.500
이 사용자 인터페이스에 이 특정 래그 지식 저장소가 나타나는 비즈니스

02:36.500 --> 02:38.930
목적이 뭘까 생각하죠

02:39.020 --> 02:43.070
중요한 질문이자 중요한 대답이에요

02:43.190 --> 02:45.410
목적이 전혀 없다는 거예요

02:45.440 --> 02:47.690
이 도표를 왜 갖고 있죠?

02:47.720 --> 02:48.920
정말 멋져요

02:48.920 --> 02:49.850
그러길 바라요

02:49.880 --> 02:51.050
제 수업이고요

02:51.080 --> 02:52.730
그러니 하고 싶으면 해야죠

02:53.870 --> 02:59.450
네, 정말 진지하게 말씀드리면 데이터를 표면화할 수 있어서 좋았고 Gadio 사용자

02:59.450 --> 03:04.730
인터페이스에서 줄거리를 보여주는 게 얼마나 쉬운지 설명할 수 있어서 좋았어요

03:04.850 --> 03:10.850
하지만 이 차는 자랑하려고 달리는 거예요

03:10.850 --> 03:17.660
시간이 흐르면 메모리에서 보여주는 게 유용할 거예요 벡터 포맷으로 메모리의 여러 지점을

03:17.660 --> 03:21.710
보여주는 거죠 마우스로 가리키면 보이고요

03:21.890 --> 03:27.560
제가 직접 조정할 수도 있지만 아니면 비트가 해줘서 코드를 푸시해 이걸

03:27.560 --> 03:32.450
좀 더 유용하게 만들고 불필요한 변화는 줄여줄 수도 있죠

03:32.510 --> 03:36.800
제가 말하는 동안 눈치챘을지도 모르는 또 다른 건 갑자기 메모리가

03:36.800 --> 03:41.630
백지화됐다는 겁니다 왜 메모리가 백지화됐는지 궁금하실 거예요

03:41.660 --> 03:47.240
메모리가 빈 이유는 물론 여기서 실행이 시작됐기 때문이죠

03:47.330 --> 03:53.570
이것도 비트는 방법이 있지만 현재는 실행이 진행 중일 때 테이블이 비어있다가

03:53.570 --> 03:59.750
실행이 완료되면 다시 채워질 겁니다 좀 엉성하지만 고칠 수 있죠

03:59.750 --> 04:02.420
UI 개선을 위한 연습이 될 수 있어요

04:02.630 --> 04:07.280
하지만 지금은 모듈이라고 부르는 지점에 이르렀어요

04:07.280 --> 04:09.890
그래서 수단이 준비 운동을 하는 거죠

04:10.340 --> 04:16.550
시간이 좀 걸리기 때문에 일시 정지하고 완료되면 다시 돌아오죠

04:16.580 --> 04:17.660
그때 봐요
