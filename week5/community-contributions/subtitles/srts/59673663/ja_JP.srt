WEBVTT

00:00.890 --> 00:03.080
だが､ まだある｡ 

00:03.110 --> 00:07.670
ユーザーインターフェイスをもっとかっこよくするために､ もう少し追加する必要がある｡ 

00:07.760 --> 00:17.660
だから､ このコードにはもうちょっと手を入れた｡

00:17.660 --> 00:24.650
しかし､ ログメッセージが表示され､ 何が起こっているのか見ることができるのは満足だが､ それをユーザー・インターフェースに表示できれば､

00:24.650 --> 00:28.550
もっとすっきりするのではないかと思いついた｡

00:28.580 --> 00:34.070
Gradioのユーザー・インターフェースでは､ リクエストをしてレスポンスを返すというのが一般的なので､

00:34.070 --> 00:38.330
少し難しいですが､ 完全に可能です｡

00:38.450 --> 00:45.350
それで､ 私がどのようにアプローチしたかを正確に説明する価値は必ずしもないのですが､ 私は今､

00:45.350 --> 00:50.750
新しい､ ええと､ ファイル､ 価格という新しいモジュールに目を向けました｡

00:50.750 --> 00:51.080
そうだね｡ 

00:51.080 --> 00:54.590
ファイナル・ドット・パイとプライス・イズ・ライトの決勝戦｡ 

00:54.590 --> 01:02.420
長いログメッセージを購読できるようにするために､ 上部にいくつか追加した｡ 

01:02.660 --> 01:06.540
それから､ ほんの少しおまけも入れたよ｡ 

01:06.780 --> 01:14.340
それでは､ 新しいターミナル・ウィンドウを作って､ このユーザー・インターフェースを見てみよう｡

01:14.700 --> 01:19.650
だから､ パイソン価格と言える｡ 

01:19.680 --> 01:22.050
すみません､ condaの環境をアクティブにする必要があります｡ 

01:22.080 --> 01:26.760
コンダがLMSを活性化するのは明らかだ｡ 

01:26.850 --> 01:36.360
そして今､ 我々はパイソンの価格が最終的に適正であると言うことができる｡  パイ｡ 

01:36.660 --> 01:38.820
何が出てくるか見てみよう

01:38.880 --> 01:42.360
ええと......それで､ またしばらく考えるんだ｡ 

01:42.390 --> 01:43.680
上がってきた｡ 

01:43.680 --> 01:46.830
そして､ ここで1つか2つの変化に気づくだろう｡ 

01:46.890 --> 02:04.920
まず最初に､ お約束したように､ とても魅力的なログができました｡

02:05.040 --> 02:08.730
前回と同じように､ ここにテーブルを置いている｡ 

02:08.730 --> 02:13.940
それをクリックしたら､ 目の端にプッシュ通知が届いた｡

02:14.120 --> 02:16.070
それで､ ここには何があるんだい？

02:16.100 --> 02:27.170
さて､ ここにあるのはクロマ・データベースの3D表示で､ フロンティア・モデルに送る商品を探すのに使っている｡

02:27.380 --> 02:29.210
何を考えているかは分かるよ｡ 

02:29.270 --> 02:38.930
でも､ このユーザー・インターフェイスにこのボロ知識ストアを表示させるビジネス上の目的は何だろう？

02:39.020 --> 02:43.070
それは重要な質問であり､ 重要な答えだ｡ 

02:43.190 --> 02:45.410
つまり､ 何の目的もないということだ｡ 

02:45.440 --> 02:47.690
この図を持っている意味はない｡ 

02:47.720 --> 02:48.920
とにかく素晴らしい｡ 

02:48.920 --> 02:49.850
そうしてほしい｡ 

02:49.880 --> 02:51.050
私のコースだしね｡ 

02:51.080 --> 02:52.730
だから､ やりたければやる｡ 

02:53.870 --> 03:04.730
つまり､ 真面目に言うと､ データを表に出して､ Gradioのユーザー・インターフェースにプロットを表示させるのがいかに簡単かを説明できたのは良かった｡

03:04.850 --> 03:10.850
ええと､ でも､ これは､ ええと､ ただ､ 見せびらかすために走っているんだ｡ 

03:10.850 --> 03:17.660
時間が経てば､ おそらく便利なのは､ このメモリーに表示され､ 実際にメモリー上のさまざまなポイントをベクター形式で表示でき､

03:17.660 --> 03:21.710
その上にカーソルを置いて見ることができることだろう｡

03:21.890 --> 03:27.560
だから､ 私が自分で調整するかもしれない｡ でも､ あるいは､ あなたが私の代わりにやってくれて､ これをもう少し便利で､

03:27.560 --> 03:32.450
無償の変更でなくなるようなコードをプッシュしてくれるかもしれない｡

03:32.510 --> 03:36.800
さて､ 私が話している間にもうひとつ気づいたかもしれないが､ 記憶が突然真っ白になった｡

03:36.800 --> 03:41.630
いったいなぜ記憶が真っ白になったのか､ 不思議に思うかもしれない｡

03:41.660 --> 03:47.240
そして､ 記憶が真っ白になったのは､ もちろん､ こちらで滑走が始まったからだ｡ 

03:47.330 --> 03:53.570
実は､ これを回避する方法もあるのだが､ 今のところ､ 実行中はテーブルが空白になり､

03:53.570 --> 03:59.750
実行が完了すると再入力される｡

03:59.750 --> 04:02.420
そしてそれは､ UIを改善するための練習になるかもしれない｡ 

04:02.630 --> 04:07.280
うーん､ でも今､ モーダルを呼び出すところまで来ているのがわかるだろう｡ 

04:07.280 --> 04:09.890
そうしてモードは温まっていく｡ 

04:10.340 --> 04:16.550
それでは､ 少し時間がかかるので､ 一時中断し､ 終了したらまた戻ってきます｡ 

04:16.580 --> 04:17.660
ではまた
