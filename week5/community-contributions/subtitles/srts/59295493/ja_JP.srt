WEBVTT

00:00.710 --> 00:03.590
そして第4週､ 3日目へようこそ｡ 

00:03.590 --> 00:09.650
私たちは､ 商業的価値を高める新たなビジネス・プロジェクトに着手しようとしている｡ 

00:09.680 --> 00:12.260
エキサイティングなプロジェクトになるだろう｡ 

00:12.260 --> 00:17.450
難しい挑戦になるだろうし､ いつものように楽しみながらやるつもりだ｡ 

00:17.480 --> 00:19.250
始めよう｡ 

00:19.280 --> 00:36.710
まず最初に､ 今回あなたができることをまとめておきます｡

00:36.710 --> 00:39.710
もちろん､ ユーザーインターフェイスも含まれる｡ 

00:39.710 --> 00:45.470
アプリになるようにうまくパッケージングするために､ 多くの断片が含まれることになる｡ 

00:45.920 --> 00:47.810
というわけで､ チャレンジの簡単な覚え書きだ｡ 

00:47.810 --> 00:53.660
私たちは､ PythonをCに変換できるツールを作りたい｡ 

00:53.660 --> 00:57.320
そして今日は､ フロンティアモデルの解答を行う｡ 

00:57.320 --> 01:04.820
次回はオープンソースのモデルを追加し､ クローズドソース対オープンソースのフロンティアを戦い､

01:04.820 --> 01:07.520
どちらが勝つかを見てみたい｡

01:08.030 --> 01:12.380
ええと､ まず､ これからやることを簡単に説明します｡ 

01:12.380 --> 01:19.550
そこで､ モデルにPythonコードとCプラスを再実装してほしいことを説明するプロンプトを出すことにする｡

01:19.550 --> 01:20.390
それに

01:20.420 --> 01:24.320
ええと､ これより少し言葉が多くなるかもしれませんが､ このような内容で､

01:24.350 --> 01:31.430
モデルには何の説明もせず､ 単にC＋＋＋のコードを提供するよう説得するものです｡

01:31.430 --> 01:37.250
そしてその目的は､ より速く走り､ 同じアウトプットを出すために必要なことは何でもすることであるべきだ｡ 

01:37.250 --> 01:40.040
しかし､ そうでなければ､ 世界は彼らの牡蠣だ｡ 

01:40.070 --> 01:44.120
好きなことができる｡ 

01:44.150 --> 01:49.190
そして､ これはPythonで試すためのちょっとしたコードだ｡ 

01:49.190 --> 01:56.120
その級数とは､ 1マイナス3分の1プラス5分の1､

01:56.120 --> 02:05.270
マイナス7分の1プラス9分の1､ マイナス11分の1などである｡

02:05.300 --> 02:06.350
おわかりだろう｡ 

02:06.380 --> 02:12.950
その級数を続けて4倍すると､ だんだん円周率に収束していくんだ｡ 

02:12.980 --> 02:14.840
でも､ とても時間がかかる｡ 

02:14.960 --> 02:23.030
そして､ 最初の1億回の反復で､ πにかなり近づくことができる｡

02:23.150 --> 02:28.670
しかし､ 1億回の反復を行うには､ 電卓で膨大なタイピングをしなければならない｡ 

02:28.730 --> 02:30.830
あー､ でもPythonならそれなりに速くできるよ｡ 

02:30.830 --> 02:36.410
しかし､ Cプラス・プラスがそれをもっと早く実現できることを期待しているし､ フロンティアのモデルたちがその手助けをしてくれることを期待している｡

02:36.410 --> 02:37.400
見てみよう｡ 
