WEBVTT

00:00.530 --> 00:07.670
このプロジェクトに対する私の熱意が少々非常識であることは自覚しているが､ 結果には非常に満足していることをお伝えしなければならない｡

00:07.700 --> 00:12.620
これほど多くの可動部品があり､ 技術的に非常に複雑で､ 実質的な内容も多いのに､

00:12.620 --> 00:22.340
私たちのお得なプッシュ通知のようなシンプルで具体的な結果をもたらす､ このようなプロジェクトはめったにない｡

00:22.520 --> 00:29.750
通知王を超えた何かが､ これを実に満足のいくものにしている｡ 

00:30.290 --> 00:35.660
この問題を解決するためのテンプレートは､ 似たようなビジネス上の問題やスタートアップのアイデア､

00:35.660 --> 00:48.680
商業上の問題など､ あなたがすでに考えているような問題にも応用できるということです｡

00:48.710 --> 00:53.570
つまり､ すぐに思いつくことを挙げるとすれば､ このプロジェクトのためのデータ､

00:53.570 --> 01:00.020
アマゾンの価格設定データをハギング・フェイスで探していたときに､

01:00.020 --> 01:15.420
企業の年次報告書を掲載し､ その報告書が発表された日とその数日後の株価の変化との関係を示したデータもたくさん見つけました｡

01:15.420 --> 01:23.580
そして､ これはよりストレッチである一方で､ それを破る方法を見つけることができれば､ 明らかに大きなチャンスでもあることに思い当たった｡

01:23.610 --> 01:35.130
それを見て､ ある企業の報告書が公表された結果､ 株価がどうなるかを予測できる独自のモデルを構築する方法があるとすれば｡

01:35.160 --> 01:42.630
そして､ リリースされる新会社のレポートをスキャンするスキャナー・エージェントを持つことも想像できるだろう｡

01:42.660 --> 01:49.710
そのため､ このような問題に適応するエージェントのワークフローが非常によく似ていることがわかります｡

01:49.710 --> 01:54.660
もちろん､ 取引に関する決定はすべて自己責任であり､

01:54.660 --> 01:56.880
私は一切関知しない｡

01:57.060 --> 02:03.120
そして､ 企業の報告書を読み､ その結果として強固な取引判断を下すような自動化されたAIシステムを構築できるという問題は､

02:03.120 --> 02:09.510
明らかにまだ誰も解決できていない｡

02:09.510 --> 02:15.810
でも､ とても重要な挑戦だと思う｡ 

02:15.810 --> 02:21.060
そして､ それを指摘したかったのは､ もしあなたがそれをやりたかったら､ パズルの断片を見るという点で､

02:21.060 --> 02:24.360
それがいかに似ているかを示しているからだ｡

02:24.360 --> 02:33.160
何が起こるか､ そしてそのようなデータからシグナルを見つけることができるかどうかを確認し､

02:33.160 --> 02:40.600
同様のエージェントのワークフローを構築する機会として利用する｡

02:41.410 --> 02:42.040
オーケー｡ 

02:42.070 --> 02:49.930
ともあれ､ 今週最後のスライドに移ろう｡ 今週の､

02:49.930 --> 02:54.430
ではなく､ 今日の､ である｡

02:54.430 --> 02:59.890
最終日は8週目の5日目で､ このコースの締めくくりとなる｡ 

02:59.890 --> 03:01.930
それを見逃す手はない｡ 

03:02.050 --> 03:07.210
この時点で､ フロンティア・モデル､ オープンソース・モデル､ ハギング・フェイス､

03:07.210 --> 03:13.510
ツールを使ったAPI､ 構造化された出力､ Gradioからの支援を受けたラグを使って､

03:13.510 --> 03:18.760
コードとテキストを生成することができる｡

03:18.790 --> 03:25.180
データをキュレーションするのは大変で骨の折れる作業だが､

03:25.180 --> 03:30.280
おそらく最も重要なステップだろう｡

03:30.460 --> 03:34.330
ベースラインモデルを作り､ フロンティアモデルを微調整することだ｡ 

03:34.330 --> 03:38.380
そして､ オープンソースのモデルを選択し､ トレーニングすることができる｡ 

03:38.380 --> 03:39.370
そして我々はそれを成し遂げた｡ 

03:39.400 --> 03:42.010
そうすることで､ 私たちはフロンティアを打ち破った｡ 

03:42.040 --> 03:44.770
モデルをプロダクションにデプロイすることができます｡ 

03:44.770 --> 03:48.730
モーダルを使って､ クラウド上に何かを置くことができる｡ 

03:48.760 --> 03:55.750
また､ 他の方法でコードをプロダクション化し､ 本番環境で実行できるように準備することもできる｡

03:56.140 --> 04:07.030
そして今､ 複雑なタスクを分解するために､ プランニング・メモリー､ データベース､ 複数のエージェントが連携するエージェント型ワークフローを構築することができる｡

04:07.360 --> 04:11.470
そして､ 明日の準備に取りかかる｡ 

04:11.470 --> 04:17.920
明日は､ もちろん､ ユーザー・インターフェースを構築する｡

04:18.040 --> 04:25.270
今日､ ワークフローを実行したとき､ それが実行され､ 完了したことに気づくだろう｡

04:25.270 --> 04:31.330
だから自律走行ではないし､ 走り続けるわけでもない｡

04:31.330 --> 04:32.950
だから､ もちろんそれを修正する必要がある｡ 

04:32.950 --> 04:35.320
だから､ 明日はその両方をやるつもりだ｡ 

04:35.320 --> 04:43.270
それが終われば､ AIとLMエンジニアリングをマスターしたことになる｡ 

04:43.330 --> 04:45.100
その時が待ち遠しい｡ 

04:45.100 --> 04:49.300
君たちが興奮し､ 誇りに思うことを願っている｡ 
