WEBVTT

00:01.190 --> 00:07.460
さて､ 最後に今週のチャレンジについて紹介しよう｡

00:07.460 --> 00:10.850
そして､ これはとても楽しいものになると思う｡ 

00:11.150 --> 00:14.870
僕らが一緒にやっているすべてのプロジェクトが楽しいと感じてくれていることを願っている｡ 

00:14.960 --> 00:21.410
私たちをさまざまな方法で伸ばしてくれるような､ 面白くてジューシーな企画を考え出そうとしているんだ｡

00:21.770 --> 00:28.640
だから前回は､ 会議の音声を聞いて議事録を作成するシステムなどを作ったんだ｡

00:28.670 --> 00:31.070
今回はまったく違う｡ 

00:31.280 --> 00:33.710
コードを書くことになる｡ 

00:33.710 --> 00:43.430
特に､ このアイデアはコード変換をテーマにしたもので､ Bloopにインスパイアされたものだと思う｡

00:43.430 --> 00:45.710
そして､ それは悪魔のように素晴らしいアイデアだ｡ 

00:46.160 --> 00:59.390
そこで今回は､ PythonをCプラスに変換することで､ パフォーマンスやパフォーマンスが重要なコードを改善するための製品を書こうと思います｡

00:59.390 --> 01:00.020
それに

01:00.020 --> 01:01.270
そういうことだ｡ 

01:01.270 --> 01:05.710
そこで､ PythonをCプラスに変換する方法を見つけたい｡ 

01:05.710 --> 01:06.220
それに

01:06.220 --> 01:09.190
そして､ フロンティアモデルを使ってこれを行うつもりだ｡ 

01:09.190 --> 01:12.190
また､ オープンソースモデルでそれを行うつもりだ｡ 

01:12.190 --> 01:15.400
そしてその結果を比較する｡ 

01:15.400 --> 01:21.340
しかし､ そのタスクに最も適したllmsを選ぶことから始めなければならないのは明らかだ｡ 

01:21.340 --> 01:22.960
それが目下の課題だ｡ 

01:22.990 --> 01:24.430
楽しくなると思うよ｡ 

01:24.520 --> 01:31.630
LLMの助けを借りて､ コードを最適化する際のパフォーマンスを見てみよう｡ 

01:33.640 --> 01:37.750
その前に､ 4週目の2日目を簡単にまとめておこう｡ 

01:37.780 --> 01:40.240
もう一度だけやらせてくれ｡ 

01:40.240 --> 01:44.110
もううんざりしているだろうが､ 君たちにできることをすべて思い出してほしい｡ 

01:44.170 --> 01:49.750
ツールを使ったAIアシスタントの構築など､ フロンティアモデルを使ったコーディングができる｡ 

01:49.750 --> 01:57.670
また､ 様々な推論タスクでパイプラインAPIとハギングフェイス､

01:57.670 --> 02:10.690
フェイス､ トーケナイザー､ モデルを使用してオープンソースのソリューションを構築することができます｡

02:10.720 --> 02:12.010
それで今は？

02:12.010 --> 02:16.990
これで､ リーダーボードやアリーナ､ その他のリソースから得られた実際の結果に裏打ちされた､

02:16.990 --> 02:24.400
あなたのプロジェクトに適したLLMを自信を持って選択できる状態になったはずだ｡

02:24.430 --> 02:29.530
適切なLLMを選ぶというのは､ 通常､ 2つか3つのLLMを選んでプロトタイプを作成し､

02:29.560 --> 02:38.560
次回以降､ 最終的に最も優れたパフォーマンスを発揮するLLMを選ぶということです｡ モデルのコーディング能力を評価する方法を深く理解し､

02:38.560 --> 02:51.370
フロンティアモデルを使ってコードを生成し､ LLMを使ってソリューションをフロントからバックまで構築してコードを生成する｡

02:51.370 --> 02:59.530
そしてそれは､ 高度に熟練したLLMエンジニアになるための道のりで､ あなたが身につけたもうひとつのスキルになるだろう｡

02:59.530 --> 03:00.700
そこで会おう｡ 
