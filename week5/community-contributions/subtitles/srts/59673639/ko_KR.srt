WEBVTT

00:00.680 --> 00:08.180
사용자 인터페이스에 대한 코드에 오신 것을 환영합니다 파이썬 을 살펴보도록 하죠

00:08.180 --> 00:10.130
가격 이즈 라이트 닷파이예요

00:10.130 --> 00:18.860
여기서 특히 제품 뒤 UI를 구성하는 코드를 살펴볼 거예요

00:19.070 --> 00:22.070
몇 가지 수입품으로 시작하죠

00:22.190 --> 00:24.110
그라디오를 수입하는 데 아주 중요한 부분이죠

00:24.110 --> 00:29.210
이건 훨씬 더 중요한 겁니다 거래 에이전트 프레임워크를 수입하는 데요 우리가 구축한 것의

00:29.210 --> 00:29.900
핵심이죠

00:30.230 --> 00:33.440
클래스 앱을 정의하죠

00:33.440 --> 00:39.080
아래로 스크롤을 하면 app.lan이라고 호출하는 것이 보이죠.

00:39.110 --> 00:41.270
앱을 생성해 실행하죠

00:41.270 --> 00:43.250
뭘 만드는 거죠?

00:43.250 --> 00:44.240
별로 하는 게 없어요

00:44.240 --> 00:47.420
에이전트 프레임워크를 위한 빈 변수를 설정하죠

00:47.450 --> 00:51.260
육즙이 흘러나오는 방식이죠

00:51.260 --> 00:59.200
사용자 인터페이스를 생성하죠 그래디오의 더 고급 구성 요소를 이용해서요 가격은 적당하다를

00:59.200 --> 01:00.280
통해서요

01:00.610 --> 01:06.250
여기 보이는 코드는 우리가 이미 봤던 것과 꽤 유사해요

01:06.280 --> 01:10.480
사실 사용자 인터페이스는 여기 이 부분과 동일해요

01:10.480 --> 01:14.020
말다툼이 좀 있었어요

01:14.020 --> 01:17.890
그리고 데이터 프레임을 포함해요

01:17.890 --> 01:22.630
설명 가격 추정 할인이랑 얼이 기둥이에요

01:22.630 --> 01:28.480
아까처럼 기회 데이터 프레임이란 것에 설정되고 할당되죠

01:28.750 --> 01:33.040
바뀐 건 그 후에 일어날 일뿐이에요

01:33.040 --> 01:34.810
자, 시작하죠

01:34.840 --> 01:37.630
이 파일의 새로운 것들이죠

01:37.630 --> 01:40.780
UI .load가 있어요

01:40.780 --> 01:43.660
여기서 다시 그래디오에게 말하죠

01:43.690 --> 01:48.310
장전할 때 특정 지시를 따라야 해요

01:48.310 --> 01:54.060
그러데이션을 위한 표준 포맷을 이용해 명시합니다 함수의 이름으로 시작하면

01:54.060 --> 01:56.970
입력과 출력을 호출해야 하죠

01:56.970 --> 02:00.690
이 경우엔 start라는 함수를 호출하라고 하고 있어요

02:00.720 --> 02:02.700
이 함수에 입력값이 없어요

02:02.700 --> 02:07.890
그게 뭘 반환하든 그걸 기회 데이터 프레임에 연결하세요

02:07.890 --> 02:13.500
그 말은 테이블에 Put이 가능한 일부 정보를 반환하길 기대한다는 거죠

02:13.500 --> 02:16.860
함수 시작에서 기대하는 게 바로 이거죠

02:17.310 --> 02:23.130
그런 다음 다른 Gadio UI 구성 요소를 생성합니다 GR.Timer라는 거죠

02:23.130 --> 02:26.160
그게 타이밍을 잡아주죠

02:26.160 --> 02:29.100
이건 사실 보이지 않는 UI 구성 요소예요

02:29.400 --> 02:35.160
무대 뒤에서 돌아가며 60대마다 깨어나는 거죠

02:35.160 --> 02:38.580
60년대에는 어떻게∙∙∙ 아니, 그래디오에게 어떻게 해야 할지 말해줘야 해요

02:38.580 --> 02:42.480
당신은 그래디오에게 타이머, 점, 체크라고 말해요

02:42.480 --> 02:48.870
그렇게 할 때 정보를 다시 그라디오에게 제공하죠 표준 그라디오 구조의 표준 접근법을

02:48.870 --> 02:50.060
사용해서요

02:50.060 --> 02:52.220
호출될 함수를 알려주는 거죠

02:52.220 --> 02:54.350
이 경우에는 출발해야죠

02:54.380 --> 03:01.610
입력값을 주는데 아무것도 없으면 출력은 무엇이든지 기회 데이터 프레임에

03:01.610 --> 03:03.080
놓여져야 해요

03:03.080 --> 03:05.300
아주 간단하죠

03:05.330 --> 03:11.180
우리가 호출하는 SELECT 메서드는 아까와 완전히 똑같아요

03:11.180 --> 03:12.440
변하지 않은 또 다른 거죠

03:12.440 --> 03:13.550
완전히 똑같진 않아요

03:13.550 --> 03:16.490
비트만 좀 바뀌었지 거의 똑같아요

03:16.550 --> 03:23.570
에이전트 프레임워크 플래너에게 전화하는 걸로 끝나요 메신저 알림 기회에 대한 알림이죠

03:23.840 --> 03:27.290
작은 변화가 보이실 거예요

03:27.290 --> 03:29.360
전체 알림을 할 거예요

03:29.750 --> 03:37.130
이제 남은 건 시작과 시작을 볼 수 있는 두 가지 함수를 살펴보는 거예요

03:37.130 --> 03:44.810
디스플레이 상단에 시작과 두 가지 함수가 있어요

03:44.820 --> 03:48.030
그럼 시작부터 살펴보죠

03:48.060 --> 03:53.280
시작은 거래 에이전트 프레임워크의 새 인스턴스를 생성해요

03:53.310 --> 03:56.610
전체 프레임워크를 통제하는 핵심 객체죠

03:56.940 --> 04:02.460
인스턴스화하고 어떤 기회가 있는지 메모리를 요청하죠

04:02.460 --> 04:08.430
그리고 이 기회들을 위해 함수 테이블을 호출하고 그 테이블을 반환하죠

04:08.460 --> 04:09.930
4번 테이블은 뭘 하죠?

04:09.960 --> 04:12.360
4번 테이블은 이 작은 함수예요

04:12.900 --> 04:15.870
4번 테이블은 기회를 잡아요

04:15.870 --> 04:18.810
여기 들어가면 기회가 있다는 걸 기억하세요

04:18.840 --> 04:23.250
이 물건들이 기회예요

04:23.250 --> 04:30.000
에이전트 프레임워크의 메모리에 저장되는 게 바로 그겁니다 거래, 추정, 할인을 포함하죠

04:30.000 --> 04:31.380
그게 기회예요

04:31.980 --> 04:34.170
8주 차로 돌아가 보죠

04:34.440 --> 04:42.530
이 함수는 기회 객체를 문자열 목록으로 변환해요

04:42.560 --> 04:47.840
문자열 리스트입니다 설명, 가격, 추정, 할인 URL

04:47.840 --> 04:54.860
정확한 유형과 구조죠 여기 아래 데이터 프레임에 넣어야 하는 거요

04:54.890 --> 04:58.730
시작은 단순히 거래를 만드는 거죠

04:58.730 --> 04:59.480
프레임워크 요원이에요

04:59.510 --> 05:06.440
메모리를 보고 문자열로 변환해 리턴하고 가는 거죠

05:06.470 --> 05:09.920
60년대마다 그렇게 불리죠

05:09.950 --> 05:13.160
고도 아주 비슷한 걸 할 거예요

05:13.160 --> 05:14.630
아주 비슷하게 생겼어요

05:14.660 --> 05:18.200
아주 작은 선 하나만 추가된 거예요

05:18.350 --> 05:19.490
별 효과가 없어요

05:19.490 --> 05:20.780
만능이에요

05:20.780 --> 05:25.370
에이전트 프레임워크에서 실행되는 라인이죠

05:25.370 --> 05:27.950
전에는 수동으로 작업했었죠

05:27.950 --> 05:31.610
우리가 구축한 워크플로우 전체를 촉발하죠

05:31.610 --> 05:33.290
그게 고우의 역할이죠

05:33.320 --> 05:41.800
GR 타이머로 60분마다 고가 차단됩니다 그게 작업의 핵심이죠

05:42.010 --> 05:45.700
이제 작동하는 걸 보는 일만 남았죠

05:45.820 --> 05:52.630
이제 런처로 가서 새 터미널을 열어 볼게요

05:52.660 --> 05:58.750
이제 변경할 것은 LMS를 활성화한 콘다 환경을 활성화하는 거죠

05:59.920 --> 06:01.090
됐어요

06:01.090 --> 06:08.020
파이썬 + $s right이라고 입력하면 실행할 수 있어요

06:08.050 --> 06:10.570
도트 파이는 이렇게 간단해요

06:10.600 --> 06:13.390
드럼 비트 주세요

06:13.420 --> 06:15.220
321번도요

06:15.220 --> 06:16.180
시작할게요

06:18.100 --> 06:23.050
잠깐 생각하는 동안 멈췄다가 쾅! 하고 터져요

06:23.080 --> 06:27.100
가격이 적당해서 더 많은 일이 진행되고 있어요

06:27.100 --> 06:29.950
바로 우리 앞에 있어요

06:30.250 --> 06:32.200
우리가 보는 건 물론 메모리예요

06:32.230 --> 06:34.860
주어진 기회를 살피는 거죠

06:35.280 --> 06:39.120
스크롤을 내려 하단 항목을 볼 수 있어요

06:39.120 --> 06:45.180
가장 최근에야 그 물건이 떠올랐다고 생각해요 전에 명령줄에서

06:45.180 --> 06:46.920
실행했을 때요

06:47.010 --> 06:49.500
그리고 당연히 메모리에 저장하죠

06:49.500 --> 06:54.000
여기서 발견된 물건들을 보고 있어요

06:54.000 --> 07:02.730
명령줄로 다시 가보면 초기화되고 설정되고 준비된 것이 보이죠 이제

07:02.730 --> 07:09.480
반복문 안에 있게 될 겁니다 에이전트가 체크하기를

07:09.480 --> 07:11.760
기다리고 있죠

07:11.790 --> 07:16.590
1분 후에 시작될 겁니다 여러분도 그렇게 하세요

07:16.590 --> 07:19.830
이걸 열어 실행하고 있으니 시도해 보세요

07:19.830 --> 07:22.590
그럼 저처럼 달리는 걸 보게 될 거예요

07:22.590 --> 07:28.980
다음 강의에서는 그 결과를 살펴볼 거예요

07:29.250 --> 07:30.720
거기서 봐요
